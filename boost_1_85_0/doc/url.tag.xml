<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.5" doxygen_gitid="2f6875a5ca481a69a6f32650c77a667f87d25e88">
  <compound kind="struct">
    <name>boost::urls::grammar::aligned_storage</name>
    <filename>structboost_1_1urls_1_1grammar_1_1aligned__storage.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>void *</type>
      <name>addr</name>
      <anchorfile>structboost_1_1urls_1_1grammar_1_1aligned__storage.html</anchorfile>
      <anchor>af4d263b48c5f48f6a0560aa7951c7dc8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void const *</type>
      <name>addr</name>
      <anchorfile>structboost_1_1urls_1_1grammar_1_1aligned__storage.html</anchorfile>
      <anchor>aa96fe7e53c3c3557e5a3fb2b003c9cd1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::urls::string_token::arg</name>
    <filename>structboost_1_1urls_1_1string__token_1_1arg.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>prepare</name>
      <anchorfile>structboost_1_1urls_1_1string__token_1_1arg.html</anchorfile>
      <anchor>a5577de622d8e0e89bf49315b16fe6970</anchor>
      <arglist>(std::size_t n)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~arg</name>
      <anchorfile>structboost_1_1urls_1_1string__token_1_1arg.html</anchorfile>
      <anchor>a03210f6b6d7a9c97e2ebe883f5e070e2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>arg</name>
      <anchorfile>structboost_1_1urls_1_1string__token_1_1arg.html</anchorfile>
      <anchor>abb780081fd6ce7f629d906716860c132</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>arg</name>
      <anchorfile>structboost_1_1urls_1_1string__token_1_1arg.html</anchorfile>
      <anchor>ac05a43e7271642994454cc49f805d485</anchor>
      <arglist>(arg &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>arg</name>
      <anchorfile>structboost_1_1urls_1_1string__token_1_1arg.html</anchorfile>
      <anchor>ae20773946b0f5a0d8a7c9944e5e81ddc</anchor>
      <arglist>(arg const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>arg &amp;</type>
      <name>operator=</name>
      <anchorfile>structboost_1_1urls_1_1string__token_1_1arg.html</anchorfile>
      <anchor>a0264ea25c3ca3850599fd59b503bfba0</anchor>
      <arglist>(arg &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>arg &amp;</type>
      <name>operator=</name>
      <anchorfile>structboost_1_1urls_1_1string__token_1_1arg.html</anchorfile>
      <anchor>a6cba5f51b335c363a5a6b8b61040c6dc</anchor>
      <arglist>(arg const &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::authority_view</name>
    <filename>classboost_1_1urls_1_1authority__view.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~authority_view</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a0c04d8cbf778ddb00b93725e89b00070</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>authority_view</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>add91f66fac63577bdc0acec5c6fd8714</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>authority_view</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a050b378442018bde019f3bb39f879c60</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>authority_view</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a5011a49914f87421aba00f030f4f26d1</anchor>
      <arglist>(authority_view const &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>authority_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a21a631a094899ebe7a7c8b92b6cb3f14</anchor>
      <arglist>(authority_view const &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>aa277c437ca5b8bd3e5db5d529f0c2f49</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>adcff7fb58a2c3f6c3ecd4097234bab34</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>data</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a4a853be878a716588994409bc4d61b98</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>ac1fb9e45f9621783bc8a081fc5f218e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a9bdcde97a1a2da8c65e139c1c8674ae0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>userinfo</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a4c1d91557ffcebb00e74f9346f28b11c</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a9099305909b4c2cf84c926621676e77e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>user</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>ae1b75b00e44aa7ca0fb1be4601124e27</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_user</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a191ac81e974202f2dc8a9413e53c4c3a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_password</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>af2b100322f88560945f4add9065baecd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>password</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a016539a4ea90d6f774bb37f14fd2397a</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_password</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>aa10618cfe1d1abe59f4fa4f115368730</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::host_type</type>
      <name>host_type</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a377d463ec1aae160754c16f2d716a405</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a02aa7d30664b8c57a085bac7b4ac7380</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>ad1d0671cabda4aa6972057d39500b515</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_address</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a3ee4a67a605df23004745555f0c5118f</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_address</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a0229387b45b4060fb6d95b6920e0dfcd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv4_address</type>
      <name>host_ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a154720ddb0dd9d4b68bd62d9bfdc7403</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv6_address</type>
      <name>host_ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>ae605327d6a29ff4668343ffee43f02bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>host_ipvfuture</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a8962f341513d128b3b6c3d1eeb65864d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_name</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a0b1c7f83771b2226880b146c13508f74</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_name</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a57f6c920fd7d5e6aa049e62f846912aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_port</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a30c6655a96acc9c6ebd92a0fff1e3265</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>port</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>ab1d2eb6da2ee14c8f967768e9b985ce4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::uint16_t</type>
      <name>port_number</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a8441020aab8c5a70087bf0081f22cd17</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_and_port</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>ac07ba58444cb8efe62d5361ec847d9d3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>ad14219e2a60b16154c4bfce20d171fc8</anchor>
      <arglist>(authority_view const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>authority_view</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a0a58c05a6d2c8ddbbb852c43be141107</anchor>
      <arglist>(detail::url_impl const &amp;u) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl</type>
      <name>u_</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a3c451cb158f6f32e042e1c431705ad23</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a76a2e8e22adebf41adfa135bcd99d89c</anchor>
      <arglist>(authority_view const &amp;a0, authority_view const &amp;a1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a92b02a9bc0df58b66ff0e8cb98c49720</anchor>
      <arglist>(authority_view const &amp;a0, authority_view const &amp;a1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>aeb654f37a8b0a09cb080a2952ad10072</anchor>
      <arglist>(authority_view const &amp;a0, authority_view const &amp;a1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a966da5766724ef32c12166e4c8369a5f</anchor>
      <arglist>(authority_view const &amp;a0, authority_view const &amp;a1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a154ae8b03f56f759a1381ae7f1f9b5ac</anchor>
      <arglist>(authority_view const &amp;a0, authority_view const &amp;a1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>ad03276c229bdcc7e8706190011cbe29c</anchor>
      <arglist>(authority_view const &amp;a0, authority_view const &amp;a1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classboost_1_1urls_1_1authority__view.html</anchorfile>
      <anchor>a4ad608bbda73b3e922dcaed82104d8f6</anchor>
      <arglist>(std::ostream &amp;os, authority_view const &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::decode_view</name>
    <filename>classboost_1_1urls_1_1decode__view.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a6a152529fca54092fc7ac5f74b07cdf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>aaeaf581cafe1e0970189936498d24f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a7f9b85e6384367aec5bd176d0a3f26a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a38d0378e4987d159856c8045ddb08b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a480494a846a5b17a9644298d0ca97b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a0769463b349c2c911bf70f187895ba35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>ace442eb10312fb8ec5c18edfc543f1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>decode_view</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a863bbb8776b2fe0fc4bc1dcf40b3b0e5</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>decode_view</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a03828719a8a4b51292eea3ea3c70d3a9</anchor>
      <arglist>(pct_string_view s, encoding_opts opt={}) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a74a2b0ccd1dfa52aad8c7fca10f9b5c2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>ad0bca7bee0871ceb8fa120b77f9d6c58</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a607324bbc1f34715b2ab46b6de959a1a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>acf42be667bbb590ef7b8ff56a481237c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>front</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a379b616d40571df068d8c819bb1c26bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a76854cf47d7521c499c21bb8208c98f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a858799e5f9470ecf563fd8391e7d6456</anchor>
      <arglist>(core::string_view s) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a3455211981f4dc73ba19a65480b933c1</anchor>
      <arglist>(core::string_view s) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a3bc3c41e47cbcef63c3058da9a78a07f</anchor>
      <arglist>(char ch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>ad41c51c222c6436951dd96092885a4bb</anchor>
      <arglist>(char ch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a4a13f127156f210ca1cd2c560c5a999a</anchor>
      <arglist>(char ch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>rfind</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>aa6d5881ee46d4e4555aa0599a1d4ffa3</anchor>
      <arglist>(char ch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_prefix</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a52be46628f6261d599e423f175e1a296</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_suffix</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a4ff9d6df36fdc9e73d81462894eb33f3</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>encoding_opts</type>
      <name>options</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a6cdef16ca560dd69f2e3ae7a6a36a27c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a547b0920c79e01f99b47355ddc780eff</anchor>
      <arglist>(core::string_view other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a11da6cfdd47bcda3b6c445e27acb21cb</anchor>
      <arglist>(decode_view other) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>decode_view</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>aadf0625cff2c7e87d86cacafc298e540</anchor>
      <arglist>(core::string_view s, std::size_t n, encoding_opts opt) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>write</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>aeb078218039247aa09bb2e06d0f07e69</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char const  *</type>
      <name>p_</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>ab9d0e550909a3272728d9c3fb8f05652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>n_</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>aaa94c4edc977a38566e9d0c9a8ec462b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>dn_</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a4eaca6543753d0b67a7a9ce2b70c9605</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>space_as_plus_</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>a69e206e4cd7698aa9bd96c1c31c64562</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classboost_1_1urls_1_1decode__view.html</anchorfile>
      <anchor>ae177ff14a33784ce3d90924968f66895</anchor>
      <arglist>(std::ostream &amp;os, decode_view const &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::urls::encoding_opts</name>
    <filename>structboost_1_1urls_1_1encoding__opts.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>space_as_plus</name>
      <anchorfile>structboost_1_1urls_1_1encoding__opts.html</anchorfile>
      <anchor>ad187afc16267fc545c8199077ec2f094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lower_case</name>
      <anchorfile>structboost_1_1urls_1_1encoding__opts.html</anchorfile>
      <anchor>acffb711e58ddbcc65ebcf33041a34a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>disallow_null</name>
      <anchorfile>structboost_1_1urls_1_1encoding__opts.html</anchorfile>
      <anchor>a111657103e96ad0ec1df71c13e335436</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::ignore_case_param</name>
    <filename>classboost_1_1urls_1_1ignore__case__param.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>ignore_case_param</name>
      <anchorfile>classboost_1_1urls_1_1ignore__case__param.html</anchorfile>
      <anchor>a6395b21cdc006d932822f32a7e8fa2f6</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ignore_case_param</name>
      <anchorfile>classboost_1_1urls_1_1ignore__case__param.html</anchorfile>
      <anchor>a6c70b57d09cd5a9c9f2d93c7cedf832c</anchor>
      <arglist>(__implementation_defined__) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classboost_1_1urls_1_1ignore__case__param.html</anchorfile>
      <anchor>adf0679cf8d1bc692886dda8b440b21f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>value_</name>
      <anchorfile>classboost_1_1urls_1_1ignore__case__param.html</anchorfile>
      <anchor>acaa2cd7bf1706747b5878885a51714a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::urls::grammar::range::impl1</name>
    <filename>structboost_1_1urls_1_1grammar_1_1range_1_1impl1.html</filename>
    <templarg>class R</templarg>
    <templarg>bool</templarg>
  </compound>
  <compound kind="struct">
    <name>boost::urls::grammar::range::impl2</name>
    <filename>structboost_1_1urls_1_1grammar_1_1range_1_1impl2.html</filename>
    <templarg>class R0</templarg>
    <templarg>class R1</templarg>
    <templarg>bool</templarg>
  </compound>
  <compound kind="class">
    <name>boost::urls::ipv4_address</name>
    <filename>classboost_1_1urls_1_1ipv4__address.html</filename>
    <member kind="typedef">
      <type>std::uint_least32_t</type>
      <name>uint_type</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>aa8672ca6847ce4c84757842a140822c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; unsigned char, 4 &gt;</type>
      <name>bytes_type</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a54781a6da51a622621af5cb936c23ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a9dd8aa8240127fa12f5c6cfbc56480cb</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>aebe9ca5b0cdccd7462bd5920b1677e4e</anchor>
      <arglist>(ipv4_address const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ipv4_address &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>ae64e3783019f5b45c7c12060cb155189</anchor>
      <arglist>(ipv4_address const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>aa927a74f2742372e5780412daea298e0</anchor>
      <arglist>(uint_type u) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a9bfe2903dccdb3c90e5d1ecc605f8ef2</anchor>
      <arglist>(bytes_type const &amp;bytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>aa7a99035dcb5a10f9cf302c5a34f3475</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>bytes_type</type>
      <name>to_bytes</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>ae94a2f6721a5855380277cbb724cf8d3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint_type</type>
      <name>to_uint</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a2068be0d37ef56eed17606ece541d73b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>to_string</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a4d8626a12bde022bd23b0b9d8ad032c6</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>to_buffer</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a1fd2fdc7c709da79a8e6ebdef09d20b5</anchor>
      <arglist>(char *dest, std::size_t dest_size) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_loopback</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a37685ae23836a558560d4f989dea6574</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unspecified</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a175ca5d5149fd4dd0265487d821cbf39</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_multicast</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a92ceea02a1d84123095dcfc83968fc50</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ipv4_address</type>
      <name>any</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a6b8402ad19037d4489523d498d1e480a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ipv4_address</type>
      <name>loopback</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>acf99c97afaca528d884fdd8b0f7e1df3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ipv4_address</type>
      <name>broadcast</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a23cc217d9cb93f6c9af3253c37215c49</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_str_len</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a94290fcd305bc8bbd48c5803f29742fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::size_t</type>
      <name>print_impl</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>aa0b780ce9a6062de8cc2f02607a82e6d</anchor>
      <arglist>(char *dest) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>to_string_impl</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>ae210d138d20b434c76ff0892829902d1</anchor>
      <arglist>(string_token::arg &amp;t) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint_type</type>
      <name>addr_</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a0ed60ff3ade34871deb82765dfb5b035</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a2b368841b6d189b3913ecfc281f16c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>ab2520ac7fae1482cd5ee9e38eee2bcb0</anchor>
      <arglist>(ipv4_address const &amp;a1, ipv4_address const &amp;a2) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>a382bba8a9c23cbea84e8f27785bad9f9</anchor>
      <arglist>(ipv4_address const &amp;a1, ipv4_address const &amp;a2) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classboost_1_1urls_1_1ipv4__address.html</anchorfile>
      <anchor>accec31a2e05fda7bd2b4b8bca78d1ce8</anchor>
      <arglist>(std::ostream &amp;os, ipv4_address const &amp;addr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::ipv6_address</name>
    <filename>classboost_1_1urls_1_1ipv6__address.html</filename>
    <member kind="typedef">
      <type>std::array&lt; unsigned char, 16 &gt;</type>
      <name>bytes_type</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a99bec46162fdcb5c5ef9ba7b746556d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a677da893cff6eabf152d8e2fd60dbde8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a45b5c82e162e128a948397f7fb5b5825</anchor>
      <arglist>(ipv6_address const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ipv6_address &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>afbb46114d95ad12f6c6ca8fac5d7b957</anchor>
      <arglist>(ipv6_address const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a3c79b39bc35cb64d1c9f5a437f82c8cc</anchor>
      <arglist>(bytes_type const &amp;bytes) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a0f151dae327e464db907d090650edf52</anchor>
      <arglist>(ipv4_address const &amp;addr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a2371cc0524376e431665786483d83bd8</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>bytes_type</type>
      <name>to_bytes</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>aba768cb1ffed41f41d986ad69494af2e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>to_string</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a7d457bcb5489896187d738943f3e82fd</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>to_buffer</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a956300af81f21ed307746c2d3067fcf6</anchor>
      <arglist>(char *dest, std::size_t dest_size) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unspecified</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a117e5ebc952c53f9b0407867f8eb4c07</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_loopback</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>ab98420dff9600fb2efc679f8e58fdcc5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_v4_mapped</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>ac4ff87197742ddbbc6aa81777b997ee6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ipv6_address</type>
      <name>loopback</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>af70f486f44840a27be97203adc7706a1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_str_len</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a9c6e9a5f945aedf2859b3ec8142de1a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::size_t</type>
      <name>print_impl</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>ac3d27a6df67a475e189d5ec28461568a</anchor>
      <arglist>(char *dest) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>to_string_impl</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a0594b5fb3ccc6f1c917d9feaa1668155</anchor>
      <arglist>(string_token::arg &amp;t) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bytes_type</type>
      <name>addr_</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a2236ab01c2c21914edc1c63d600a450f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>aa8841a15c4ebc037f339fd34663af820</anchor>
      <arglist>(ipv6_address const &amp;a1, ipv6_address const &amp;a2) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a73de2f7d4e64edae4177834470decdef</anchor>
      <arglist>(ipv6_address const &amp;a1, ipv6_address const &amp;a2) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classboost_1_1urls_1_1ipv6__address.html</anchorfile>
      <anchor>a79a3df3b13fbaf04b81d7a30eb5219c5</anchor>
      <arglist>(std::ostream &amp;os, ipv6_address const &amp;addr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::grammar::lut_chars</name>
    <filename>classboost_1_1urls_1_1grammar_1_1lut__chars.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>lut_chars</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>a6a96bbea5c1ccd348ef0c20f0721d19f</anchor>
      <arglist>(char ch) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>lut_chars</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>ab704f46e9e2d414a6e67047921c65449</anchor>
      <arglist>(char const *s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>lut_chars</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>a51586598dc9ffde9550da96a65f9c9a2</anchor>
      <arglist>(Pred const &amp;pred) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>a615fd4e02e0fee26c1945e8329c86f20</anchor>
      <arglist>(unsigned char ch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>a77fdb2efe3574948c786b16eef263f65</anchor>
      <arglist>(char ch) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr lut_chars</type>
      <name>operator~</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>a1fdcef41dec14e36f57314cb61eb9d6f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>constexpr</type>
      <name>lut_chars</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>a2c8a217de49562383525432f609f0f69</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type>constexpr</type>
      <name>lut_chars</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>adb986e47701eaed519ebaccea7293534</anchor>
      <arglist>(std::uint64_t m0, std::uint64_t m1, std::uint64_t m2, std::uint64_t m3) noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static constexpr std::uint64_t</type>
      <name>lo</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>a21037c890c06f1fbc2de37fc9679abd2</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static constexpr std::uint64_t</type>
      <name>hi</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>ac447eb2187e5618f30cfd9cf49c93090</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static constexpr lut_chars</type>
      <name>construct</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>aa8721991f507c5bf04be148613c0d544</anchor>
      <arglist>(char const *s) noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static constexpr lut_chars</type>
      <name>construct</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>a9a4b3ae2f3f59f5c2dde106acf7f0de3</anchor>
      <arglist>(unsigned char ch, bool b) noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static constexpr lut_chars</type>
      <name>construct</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>ad9d2988d9d1f8cafee120e153af1efff</anchor>
      <arglist>(Pred pred, unsigned char ch) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::uint64_t</type>
      <name>mask_</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>aa756504930556c894bdac0de9dd4889b</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="friend">
      <type>friend constexpr lut_chars</type>
      <name>operator+</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>a41784722a898aa4b4b7ab0f8893d7ff8</anchor>
      <arglist>(lut_chars const &amp;cs0, lut_chars const &amp;cs1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend constexpr lut_chars</type>
      <name>operator-</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1lut__chars.html</anchorfile>
      <anchor>a1cf4aad03e5898e17a83cb3ec68803ec</anchor>
      <arglist>(lut_chars const &amp;cs0, lut_chars const &amp;cs1) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::urls::no_value_t</name>
    <filename>structboost_1_1urls_1_1no__value__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>boost::urls::url_base::op_t</name>
    <filename>structboost_1_1urls_1_1url__base_1_1op__t.html</filename>
    <member kind="function">
      <type></type>
      <name>~op_t</name>
      <anchorfile>structboost_1_1urls_1_1url__base_1_1op__t.html</anchorfile>
      <anchor>a84a0fc0e64f525f371bc83a6090aae97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>op_t</name>
      <anchorfile>structboost_1_1urls_1_1url__base_1_1op__t.html</anchorfile>
      <anchor>a964dd9ae778291d19b74288a70aec37e</anchor>
      <arglist>(url_base &amp;, core::string_view *=nullptr, core::string_view *=nullptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>structboost_1_1urls_1_1url__base_1_1op__t.html</anchorfile>
      <anchor>a91702dfcac12b0dc46eed5f2decfbc85</anchor>
      <arglist>(char *, char const *, std::size_t) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>url_base &amp;</type>
      <name>u</name>
      <anchorfile>structboost_1_1urls_1_1url__base_1_1op__t.html</anchorfile>
      <anchor>afceafadb1bb446577a1ae6f04868198c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>core::string_view *</type>
      <name>s0</name>
      <anchorfile>structboost_1_1urls_1_1url__base_1_1op__t.html</anchorfile>
      <anchor>a32e8f760c79fa6b45dddef1ce5c6150d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>core::string_view *</type>
      <name>s1</name>
      <anchorfile>structboost_1_1urls_1_1url__base_1_1op__t.html</anchorfile>
      <anchor>ae97809c9530030c69e0b5b77244b1a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>old</name>
      <anchorfile>structboost_1_1urls_1_1url__base_1_1op__t.html</anchorfile>
      <anchor>a2a7accafdbed3762ac28f254f3dce72f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::urls::param</name>
    <filename>structboost_1_1urls_1_1param.html</filename>
    <member kind="function">
      <type></type>
      <name>param</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>af7cfa7d12163a46d111df0e397de947f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>param</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>a4610a67e72af894c95130ea097f53a01</anchor>
      <arglist>(param &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>param</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>a90983f37911fee99f73c585afedc70bc</anchor>
      <arglist>(param const &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>param &amp;</type>
      <name>operator=</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>ae5658e02cf4a9e434f71451b9aa00208</anchor>
      <arglist>(param &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>param &amp;</type>
      <name>operator=</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>ac924d2f4226cab5313a1c36cd2f73f00</anchor>
      <arglist>(param const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>param</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>a74adddf543c2094674ba0554e2fdcb36</anchor>
      <arglist>(core::string_view key, OptionalString const &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>param &amp;</type>
      <name>operator=</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>ae1fa76f9f9702548600e04e9ab43b411</anchor>
      <arglist>(param_view const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>param &amp;</type>
      <name>operator=</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>a5c2fa15e400c6823b6132e7407b524b5</anchor>
      <arglist>(param_pct_view const &amp;other)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>a5ca3c9a15c1bdcd644133a547e64aa38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>value</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>a2e4d1bf21f893665587aa2c497219c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>a54e4049bbb8a9aef88918b9664baf184</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>param</name>
      <anchorfile>structboost_1_1urls_1_1param.html</anchorfile>
      <anchor>abeb5c1c3d48602aa0fe6d58cd38f5719</anchor>
      <arglist>(core::string_view key, detail::optional_string const &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::urls::param_pct_view</name>
    <filename>structboost_1_1urls_1_1param__pct__view.html</filename>
    <member kind="function">
      <type></type>
      <name>param_pct_view</name>
      <anchorfile>structboost_1_1urls_1_1param__pct__view.html</anchorfile>
      <anchor>a060900a5f1f5c7533896b0072af9262f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>param_pct_view</name>
      <anchorfile>structboost_1_1urls_1_1param__pct__view.html</anchorfile>
      <anchor>ac18f2da20ada97de18cb961c599cda22</anchor>
      <arglist>(pct_string_view key, pct_string_view value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>param_pct_view</name>
      <anchorfile>structboost_1_1urls_1_1param__pct__view.html</anchorfile>
      <anchor>ac3ae43a1a323b1d660dde847923f8f86</anchor>
      <arglist>(pct_string_view key, OptionalString const &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>param_pct_view</name>
      <anchorfile>structboost_1_1urls_1_1param__pct__view.html</anchorfile>
      <anchor>a076f7cfdf3a9bdff50bb05416ba694eb</anchor>
      <arglist>(param_view const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator param</name>
      <anchorfile>structboost_1_1urls_1_1param__pct__view.html</anchorfile>
      <anchor>ab10f82e30340d79a13e2976f19c71700</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator param_view</name>
      <anchorfile>structboost_1_1urls_1_1param__pct__view.html</anchorfile>
      <anchor>a2c3f94fbffa8365cfb673dc413924f85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>pct_string_view</type>
      <name>key</name>
      <anchorfile>structboost_1_1urls_1_1param__pct__view.html</anchorfile>
      <anchor>aad7a55502ab9b9ef47ca710bda0816bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pct_string_view</type>
      <name>value</name>
      <anchorfile>structboost_1_1urls_1_1param__pct__view.html</anchorfile>
      <anchor>a385170c623361fd1b7016246b0ac6da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>structboost_1_1urls_1_1param__pct__view.html</anchorfile>
      <anchor>af0c8fbf19cb95898c664320fccb6049d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>param_pct_view</name>
      <anchorfile>structboost_1_1urls_1_1param__pct__view.html</anchorfile>
      <anchor>a4bb23657da89ddc15a4490eeb938a545</anchor>
      <arglist>(pct_string_view key, detail::optional_string const &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::urls::param_view</name>
    <filename>structboost_1_1urls_1_1param__view.html</filename>
    <member kind="function">
      <type></type>
      <name>param_view</name>
      <anchorfile>structboost_1_1urls_1_1param__view.html</anchorfile>
      <anchor>af0c35e4da5e9867979e28d9dc711bc97</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>param_view</name>
      <anchorfile>structboost_1_1urls_1_1param__view.html</anchorfile>
      <anchor>ab4613770eac99b9b6dda1b288a2c10e2</anchor>
      <arglist>(core::string_view key, OptionalString const &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>param_view</name>
      <anchorfile>structboost_1_1urls_1_1param__view.html</anchorfile>
      <anchor>a47bad290c19bf3ccd1ead644bc14036a</anchor>
      <arglist>(param const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator param</name>
      <anchorfile>structboost_1_1urls_1_1param__view.html</anchorfile>
      <anchor>ae473d4b1fc3558aa7f089f1e7ad6d78e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>core::string_view</type>
      <name>key</name>
      <anchorfile>structboost_1_1urls_1_1param__view.html</anchorfile>
      <anchor>abb75cd124723d2ec5873e9e3c3ac97c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>core::string_view</type>
      <name>value</name>
      <anchorfile>structboost_1_1urls_1_1param__view.html</anchorfile>
      <anchor>a77650dde0f6731ad670a8a20ddb3e0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>structboost_1_1urls_1_1param__view.html</anchorfile>
      <anchor>ace56344d05eaacecdc0cf005fa3224ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>param_view</name>
      <anchorfile>structboost_1_1urls_1_1param__view.html</anchorfile>
      <anchor>aae5e9baa94fd7b8e5e59cfb0af294b9f</anchor>
      <arglist>(core::string_view key, detail::optional_string const &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::params_base</name>
    <filename>classboost_1_1urls_1_1params__base.html</filename>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>ac9709e7ce7aa1fed912b797ef7a763e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a68efb049170f30d6b3a138df8318391b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a30b408e46bd9d49021423adc8eed90f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a64aeedc892eea775f70ccfaea21f9417</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>abaf8ce5f13511bf5ce96979d5ddacc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>ae9aad1287324c4610e5d4f4c0f651e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>afcbed062e46157f3f4bc0f4a54293c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a521a094cdf5891b1eddb7708388d7f3b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a880ce246a3967a0cce82541d0a6d52a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a28b1d97d309ad04496d56e3fc3a11d01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a9f1690d940dfa581e9f568495a1b07b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a8fe9009742307f24e9810e9bf293673c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a8a6b07e259f8bc83c3122d29e3c86c71</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>count</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a3ea720c42af027259814fa57700dcff8</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>aac4a3c96e9235617fc320a6f67571b2a</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a947e6d68aef9d7363caf6205feebcb56</anchor>
      <arglist>(iterator from, core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>af3fc430c1d0ac5b01a75d79ccc9e6984</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a98c67929aef71e99563ec6a3974b924a</anchor>
      <arglist>(iterator before, core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a9629e50df8fbf067a2d2f17e4fef4ce7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>params_base</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>ae3b97d2e32e7a4253c6afdcb624f687e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>params_base</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>ac7d0fb61671e7e94e992a22e6369f333</anchor>
      <arglist>(detail::query_ref const &amp;ref, encoding_opts opt) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>params_base</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a4c1143bcd7777140e9a6824d54c2484d</anchor>
      <arglist>(params_base const &amp;)=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type>params_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>ab37e1c1d239edb2fb5159464aa05083a</anchor>
      <arglist>(params_base const &amp;)=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a72a98abb35910a25857e48c595f4b49d</anchor>
      <arglist>(detail::params_iter_impl, core::string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_last_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>aabff4e60ab31111328928fad7a3d2ce1</anchor>
      <arglist>(detail::params_iter_impl, core::string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::query_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a2bef71b779a8462c0326d4a0971e9b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>encoding_opts</type>
      <name>opt_</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a90175b272366334f14c10d556f9e2391</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>af842cffbb9b993e5d05e4bc74d5c2b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_ref</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>ab4a3e0ddb0ddd0a8f1b869f6c5d5c071</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_view</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a92b6a5fd1004d2849e6e1b87a18b09ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::params_encoded_base</name>
    <filename>classboost_1_1urls_1_1params__encoded__base.html</filename>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a90dc1e052338d7e85669b2fb56781c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ab8867d709d0ac27e3244eeb0b982f014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a1dc8ffbf2123a2856970dd424d306a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param_pct_view</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>af53c36c52acd1167ae80bbc6c685a863</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param_pct_view</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a275a8762fcea0dddcc1e87e8d41b92e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a085ff226f412d846b00a96a2d5c0a054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>aa1ee98455b08a6d66817474beffeebb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ad18b3b65919d277911fa8306f6fb7c7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a95bcc0d53911682b5d777c369ad47755</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ad8e0320ca98c9d31010def82d2901bb8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a4b04016d65baebd1801a378c76800dbf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a46a86cda2960daeed6a029d466b1114c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ab8b607dacc31626499f1362c4ecb5e33</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>count</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a3d36e86ad7aeacdd8981ef11763bd924</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a151272b9666821f29cd5e03381852b4b</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a51fd280d0fdf2a2f1ca35d175ac459e7</anchor>
      <arglist>(iterator from, pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>aced00205de845ba1721b2d336c7f0400</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a8a76ab7bdd7fd14c2975c2737d5821b7</anchor>
      <arglist>(iterator before, pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>add1e23abb0bc49b2c74b5314346725d5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>params_encoded_base</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a803f86a40c1546f8c6fc6404bed1496c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>params_encoded_base</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ae7aa9dd000dd8ce0f7e07c92b69bf66b</anchor>
      <arglist>(params_encoded_base const &amp;)=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type>params_encoded_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a2381ce7c86d8f520dd7e994401ce9b94</anchor>
      <arglist>(params_encoded_base const &amp;)=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>params_encoded_base</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ab9a937f619c59fb3fe53c7c27b0132cf</anchor>
      <arglist>(detail::query_ref const &amp;ref) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a06878723541425c9a2691de66c4eabba</anchor>
      <arglist>(detail::params_iter_impl, pct_string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_last_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>aff9239b5ee48e4f2a0808f5d818669c7</anchor>
      <arglist>(detail::params_iter_impl, pct_string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::query_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a82d8b3c91cc8b83779fd37a63732d749</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>af842cffbb9b993e5d05e4bc74d5c2b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a618f7db49797e8c7fc34eac922854ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a83713cc0e60bcc8cbf4a936f26118d2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::params_encoded_ref</name>
    <filename>classboost_1_1urls_1_1params__encoded__ref.html</filename>
    <base>boost::urls::params_encoded_base</base>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a90dc1e052338d7e85669b2fb56781c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ab8867d709d0ac27e3244eeb0b982f014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a1dc8ffbf2123a2856970dd424d306a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param_pct_view</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>af53c36c52acd1167ae80bbc6c685a863</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param_pct_view</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a275a8762fcea0dddcc1e87e8d41b92e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a085ff226f412d846b00a96a2d5c0a054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>aa1ee98455b08a6d66817474beffeebb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>params_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a267997a41e310cb519f7d4a93e50c187</anchor>
      <arglist>(params_encoded_ref const &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a76c72416194deac883005c51a7be7476</anchor>
      <arglist>(params_encoded_ref const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a04e2bbfda7af8e6c36cee49dd11b7e67</anchor>
      <arglist>(std::initializer_list&lt; param_pct_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator params_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>abeeff1e3443dd7253081e4da7c3f0876</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>url</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a0ad31ac1391f82994451c22665a4900e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a7add110c979bc807b992aafe1ddc6d00</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>aa8f4ccd366c72c85acac6ec3570203d8</anchor>
      <arglist>(std::initializer_list&lt; param_pct_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a22b632d195cef54aabc15e1c49b33f74</anchor>
      <arglist>(FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>append</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a1f1b5000eb8d3a99570e37b50eb0b85d</anchor>
      <arglist>(param_pct_view const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>append</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>ac5a709991bbeb2f9109c8c226ff743f8</anchor>
      <arglist>(std::initializer_list&lt; param_pct_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>append</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>ac96c626e4b413fd549ecc5aa7824e254</anchor>
      <arglist>(FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a50ee571a260644c4a08e61d4a7aca344</anchor>
      <arglist>(iterator before, param_pct_view const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a56c9da6bba871bcd186bb6d0437f2048</anchor>
      <arglist>(iterator before, std::initializer_list&lt; param_pct_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a89fda511adc5e492ec0e1fb00885704a</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a9039f0415a66a5f26a62ea1d7ac71c7f</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a3b645265db237de3413e6f1294d5159d</anchor>
      <arglist>(iterator first, iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>erase</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>affa3febc63e730f81a788d93b6a88c50</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a347d1fb8cb0f194e30fe38d8bbb1a1c4</anchor>
      <arglist>(iterator pos, param_pct_view const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a72f62b92b8af40972c5a6fb51068f509</anchor>
      <arglist>(iterator from, iterator to, std::initializer_list&lt; param_pct_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a1e1cb8904ae1ddd90ceef5fa035f922f</anchor>
      <arglist>(iterator from, iterator to, FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>unset</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>adbb88d86812958fc24a44caebc76fdd1</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>set</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>aae2ac8ca6b3dfaca35a85d830c1a8c0d</anchor>
      <arglist>(iterator pos, pct_string_view value)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>set</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>aa57cf2214cbef36ffc6aa6f91aae2c4d</anchor>
      <arglist>(pct_string_view key, pct_string_view value, ignore_case_param ic={})</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ad18b3b65919d277911fa8306f6fb7c7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a95bcc0d53911682b5d777c369ad47755</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ad8e0320ca98c9d31010def82d2901bb8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a4b04016d65baebd1801a378c76800dbf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a46a86cda2960daeed6a029d466b1114c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ab8b607dacc31626499f1362c4ecb5e33</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>count</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a3d36e86ad7aeacdd8981ef11763bd924</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a151272b9666821f29cd5e03381852b4b</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a51fd280d0fdf2a2f1ca35d175ac459e7</anchor>
      <arglist>(iterator from, pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>aced00205de845ba1721b2d336c7f0400</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a8a76ab7bdd7fd14c2975c2737d5821b7</anchor>
      <arglist>(iterator before, pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>add1e23abb0bc49b2c74b5314346725d5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>params_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a1780ed71f064bec54a76b5055f45835e</anchor>
      <arglist>(url_base &amp;u) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>ae054413a711b68a44f297f1e3c421254</anchor>
      <arglist>(detail::params_iter_impl, pct_string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_last_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a7e72c3e6ed1fab0ee6e9bf9d83d591b9</anchor>
      <arglist>(detail::params_iter_impl, pct_string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a04896de7789713fde9697f8abb841813</anchor>
      <arglist>(FwdIt first, FwdIt last, std::forward_iterator_tag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a0b5c4e44079b2b7bb26a7108939ebb62</anchor>
      <arglist>(FwdIt first, FwdIt last, std::input_iterator_tag)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>ad8133018a2b46a2b694bc04958ec924e</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last, std::forward_iterator_tag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a3f8d0ee5b11ffa641fb8bb091ec7c2fb</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last, std::input_iterator_tag)=delete</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>url_base *</type>
      <name>u_</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a3e26dff0ad4193d494de71b7985b1141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::query_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a82d8b3c91cc8b83779fd37a63732d749</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_base</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__ref.html</anchorfile>
      <anchor>a98a5397aa18694cf4eb1ee15cc077242</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::params_encoded_view</name>
    <filename>classboost_1_1urls_1_1params__encoded__view.html</filename>
    <base>boost::urls::params_encoded_base</base>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a90dc1e052338d7e85669b2fb56781c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ab8867d709d0ac27e3244eeb0b982f014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a1dc8ffbf2123a2856970dd424d306a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param_pct_view</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>af53c36c52acd1167ae80bbc6c685a863</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param_pct_view</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a275a8762fcea0dddcc1e87e8d41b92e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a085ff226f412d846b00a96a2d5c0a054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>aa1ee98455b08a6d66817474beffeebb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>params_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__view.html</anchorfile>
      <anchor>a658f2383b0bcb89c8c93bbc76bec1884</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>params_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__view.html</anchorfile>
      <anchor>a2093f660b8ac68d49caf426a2e775879</anchor>
      <arglist>(params_encoded_view const &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>params_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__view.html</anchorfile>
      <anchor>abbf9f621a928b5835a0b32ed915d1945</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__view.html</anchorfile>
      <anchor>a37122764f47ac15100347a8278b2ee8a</anchor>
      <arglist>(params_encoded_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator params_view</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__view.html</anchorfile>
      <anchor>a665a19989b7402d30ac82dd67a31e58c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ad18b3b65919d277911fa8306f6fb7c7c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a95bcc0d53911682b5d777c369ad47755</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ad8e0320ca98c9d31010def82d2901bb8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a4b04016d65baebd1801a378c76800dbf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a46a86cda2960daeed6a029d466b1114c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>ab8b607dacc31626499f1362c4ecb5e33</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>count</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a3d36e86ad7aeacdd8981ef11763bd924</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a151272b9666821f29cd5e03381852b4b</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a51fd280d0fdf2a2f1ca35d175ac459e7</anchor>
      <arglist>(iterator from, pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>aced00205de845ba1721b2d336c7f0400</anchor>
      <arglist>(pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a8a76ab7bdd7fd14c2975c2737d5821b7</anchor>
      <arglist>(iterator before, pct_string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>add1e23abb0bc49b2c74b5314346725d5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>params_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__view.html</anchorfile>
      <anchor>ab8719ff4ea50f46929f2b91bd635a96a</anchor>
      <arglist>(detail::query_ref const &amp;ref) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a06878723541425c9a2691de66c4eabba</anchor>
      <arglist>(detail::params_iter_impl, pct_string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_last_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>aff9239b5ee48e4f2a0808f5d818669c7</anchor>
      <arglist>(detail::params_iter_impl, pct_string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::query_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__base.html</anchorfile>
      <anchor>a82d8b3c91cc8b83779fd37a63732d749</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__view.html</anchorfile>
      <anchor>af842cffbb9b993e5d05e4bc74d5c2b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_view</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__view.html</anchorfile>
      <anchor>a92b6a5fd1004d2849e6e1b87a18b09ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__view.html</anchorfile>
      <anchor>a618f7db49797e8c7fc34eac922854ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>query_rule_t</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__view.html</anchorfile>
      <anchor>a490c3f2a323d8580cd70748c84fe44e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend system::result&lt; params_encoded_view &gt;</type>
      <name>parse_query</name>
      <anchorfile>classboost_1_1urls_1_1params__encoded__view.html</anchorfile>
      <anchor>a7a8eb92da68955a3e2f670b7d41e325b</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::params_ref</name>
    <filename>classboost_1_1urls_1_1params__ref.html</filename>
    <base>boost::urls::params_base</base>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>ac9709e7ce7aa1fed912b797ef7a763e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a68efb049170f30d6b3a138df8318391b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a30b408e46bd9d49021423adc8eed90f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a64aeedc892eea775f70ccfaea21f9417</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>abaf8ce5f13511bf5ce96979d5ddacc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>ae9aad1287324c4610e5d4f4c0f651e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>afcbed062e46157f3f4bc0f4a54293c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>params_ref</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>abd15369a54bc4737cd00028860ce3f0a</anchor>
      <arglist>(params_ref const &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>params_ref</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a7f06def7459b61693abb757187f13057</anchor>
      <arglist>(params_ref const &amp;other, encoding_opts opt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a8a0fa27cc3e8cbb8ddcbe2505c5932af</anchor>
      <arglist>(params_ref const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>params_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>adb5b56e78384c2413ed3733175b90ca6</anchor>
      <arglist>(std::initializer_list&lt; param_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator params_view</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a197d8931c2da24bc63fd5b69a188cf25</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>url</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a75cdc401f348d20680c7846dfff723b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a3d939fa7475711b36e9c4af4e0a6dea3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a356438185992290bdde882ab39c24010</anchor>
      <arglist>(std::initializer_list&lt; param_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a8780d6efdfa73a464ac390bb7bd6dc41</anchor>
      <arglist>(FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>append</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a0e020f07f3c0255cd59327f90dfc0060</anchor>
      <arglist>(param_view const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>append</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>add10779a207b5c0b46e0669450e6c0f6</anchor>
      <arglist>(std::initializer_list&lt; param_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>append</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>ac4d2507f36c9329aa0cebc9e21ac9185</anchor>
      <arglist>(FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a768a56e394f0f7c8ead75cb98b5f1a9c</anchor>
      <arglist>(iterator before, param_view const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>ab4b54a1f9273b026be1d6d21df1c158b</anchor>
      <arglist>(iterator before, std::initializer_list&lt; param_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>aced156b892f1020eb8180287374206a4</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a0e5680429bf7c0533419a4d6c853b02a</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a1a88158197396c8e95ce009eeb688c80</anchor>
      <arglist>(iterator first, iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>erase</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a3f302d9c0057cddee2b3f30cd0264e20</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a896a7f4b638c4e250550d35025d74b3e</anchor>
      <arglist>(iterator pos, param_view const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>afe5a69706f8743b678b8bb50f040ec2d</anchor>
      <arglist>(iterator from, iterator to, std::initializer_list&lt; param_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>ab867f060b8591aa35a7a946573061ad2</anchor>
      <arglist>(iterator from, iterator to, FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>unset</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a6aee7431fbd3874c56307669b29724b3</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>set</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>ad94e667323b6e01965d32c7c617cea6b</anchor>
      <arglist>(iterator pos, core::string_view value)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>set</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a6da0a09c6bd7c76cf1f11c3f43e85c3f</anchor>
      <arglist>(core::string_view key, core::string_view value, ignore_case_param ic={})</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a521a094cdf5891b1eddb7708388d7f3b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a880ce246a3967a0cce82541d0a6d52a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a28b1d97d309ad04496d56e3fc3a11d01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a9f1690d940dfa581e9f568495a1b07b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a8fe9009742307f24e9810e9bf293673c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a8a6b07e259f8bc83c3122d29e3c86c71</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>count</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a3ea720c42af027259814fa57700dcff8</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>aac4a3c96e9235617fc320a6f67571b2a</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a947e6d68aef9d7363caf6205feebcb56</anchor>
      <arglist>(iterator from, core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>af3fc430c1d0ac5b01a75d79ccc9e6984</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a98c67929aef71e99563ec6a3974b924a</anchor>
      <arglist>(iterator before, core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a9629e50df8fbf067a2d2f17e4fef4ce7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>params_ref</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a6f44f32bbd6b950551d8c8347896caf1</anchor>
      <arglist>(url_base &amp;u, encoding_opts opt) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a4dd4073e60b97d27d7dd454adae3f18a</anchor>
      <arglist>(detail::params_iter_impl, core::string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_last_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a53724da5761bd44fe43633c129c512ee</anchor>
      <arglist>(detail::params_iter_impl, core::string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>aad024618154e985b6272c9d90d10b746</anchor>
      <arglist>(FwdIt first, FwdIt last, std::forward_iterator_tag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>ab5fc9bb01f59e3bc11f6d3bfbda2e731</anchor>
      <arglist>(FwdIt first, FwdIt last, std::input_iterator_tag)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a51da14dde1196d14496607d844d6d64f</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last, std::forward_iterator_tag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a067cc4e86ee96423b9f7e1e0cb0a3229</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last, std::input_iterator_tag)=delete</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>url_base *</type>
      <name>u_</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>ac1335a28ee1252f01061a8f45f9ed578</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::query_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a2bef71b779a8462c0326d4a0971e9b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>encoding_opts</type>
      <name>opt_</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a90175b272366334f14c10d556f9e2391</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_base</name>
      <anchorfile>classboost_1_1urls_1_1params__ref.html</anchorfile>
      <anchor>a98a5397aa18694cf4eb1ee15cc077242</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::params_view</name>
    <filename>classboost_1_1urls_1_1params__view.html</filename>
    <base>boost::urls::params_base</base>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>ac9709e7ce7aa1fed912b797ef7a763e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a68efb049170f30d6b3a138df8318391b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a30b408e46bd9d49021423adc8eed90f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a64aeedc892eea775f70ccfaea21f9417</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>param</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>abaf8ce5f13511bf5ce96979d5ddacc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>ae9aad1287324c4610e5d4f4c0f651e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>afcbed062e46157f3f4bc0f4a54293c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>params_view</name>
      <anchorfile>classboost_1_1urls_1_1params__view.html</anchorfile>
      <anchor>a04a4be4a0ed285f26a7d6f4dc0aaa3ef</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>params_view</name>
      <anchorfile>classboost_1_1urls_1_1params__view.html</anchorfile>
      <anchor>a9939e3dde78dfbdd7be3ebc30e2fdcaf</anchor>
      <arglist>(params_view const &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>params_view</name>
      <anchorfile>classboost_1_1urls_1_1params__view.html</anchorfile>
      <anchor>ae862a1faacee1a97d94e5bf5d08b48a8</anchor>
      <arglist>(params_view const &amp;other, encoding_opts opt) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>params_view</name>
      <anchorfile>classboost_1_1urls_1_1params__view.html</anchorfile>
      <anchor>adcb4295ccb147de8201fb5e27b071b2a</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>params_view</name>
      <anchorfile>classboost_1_1urls_1_1params__view.html</anchorfile>
      <anchor>a0d1f966c29108c5abf810947e00ebb7b</anchor>
      <arglist>(core::string_view s, encoding_opts opt)</arglist>
    </member>
    <member kind="function">
      <type>params_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1params__view.html</anchorfile>
      <anchor>a27d6341cd6b3609f6b94dd36aa5c20b4</anchor>
      <arglist>(params_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a521a094cdf5891b1eddb7708388d7f3b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a880ce246a3967a0cce82541d0a6d52a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a28b1d97d309ad04496d56e3fc3a11d01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a9f1690d940dfa581e9f568495a1b07b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a8fe9009742307f24e9810e9bf293673c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a8a6b07e259f8bc83c3122d29e3c86c71</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>count</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a3ea720c42af027259814fa57700dcff8</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>aac4a3c96e9235617fc320a6f67571b2a</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a947e6d68aef9d7363caf6205feebcb56</anchor>
      <arglist>(iterator from, core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>af3fc430c1d0ac5b01a75d79ccc9e6984</anchor>
      <arglist>(core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find_last</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a98c67929aef71e99563ec6a3974b924a</anchor>
      <arglist>(iterator before, core::string_view key, ignore_case_param ic={}) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a9629e50df8fbf067a2d2f17e4fef4ce7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>params_view</name>
      <anchorfile>classboost_1_1urls_1_1params__view.html</anchorfile>
      <anchor>ae8938a09265c935a7184b11579dcf970</anchor>
      <arglist>(detail::query_ref const &amp;ref, encoding_opts opt) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a72a98abb35910a25857e48c595f4b49d</anchor>
      <arglist>(detail::params_iter_impl, core::string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::params_iter_impl</type>
      <name>find_last_impl</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>aabff4e60ab31111328928fad7a3d2ce1</anchor>
      <arglist>(detail::params_iter_impl, core::string_view, ignore_case_param) const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::query_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a2bef71b779a8462c0326d4a0971e9b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>encoding_opts</type>
      <name>opt_</name>
      <anchorfile>classboost_1_1urls_1_1params__base.html</anchorfile>
      <anchor>a90175b272366334f14c10d556f9e2391</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1params__view.html</anchorfile>
      <anchor>af842cffbb9b993e5d05e4bc74d5c2b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1params__view.html</anchorfile>
      <anchor>a83713cc0e60bcc8cbf4a936f26118d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_ref</name>
      <anchorfile>classboost_1_1urls_1_1params__view.html</anchorfile>
      <anchor>ab4a3e0ddb0ddd0a8f1b869f6c5d5c071</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::pct_string_view</name>
    <filename>classboost_1_1urls_1_1pct__string__view.html</filename>
    <base>boost::urls::grammar::string_view_base</base>
    <member kind="typedef">
      <type>std::char_traits&lt; char &gt;</type>
      <name>traits_type</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a06219a8ef208528a1bd98580e8496424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>af243d0051bf1d1ec4712ba2a0a3bb048</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char *</type>
      <name>pointer</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aa3c78c1df65b2e81cd7b9841fa68966a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  *</type>
      <name>const_pointer</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a04f2df101e42c0cc77d2769fe0ceb155</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char &amp;</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aab04b6ff4583419e5b740947271d91c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a34104028451718493a1890549c1f4638</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  *</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>addea9ce54c0ddf32568442362f24b753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_iterator</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>adcd339ccf116c157b6d02c53de88f6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a1faa940e5e96b7b99cea5aedf7c5c5cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ae0c9469ed5a3461bdd056f92716d1029</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ac4400f988ebeb8e152f3b8fbbfa3b874</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a4cfefd99a9686d7de635e0fa15ba9614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>pct_string_view</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>ac37a5cc08109b6d640a8da8daf02c8cb</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>pct_string_view</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>a21289f09d603fee697c66582d0faa497</anchor>
      <arglist>(pct_string_view const &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pct_string_view</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>acc0a377a2641b2861cb60b15ded98eac</anchor>
      <arglist>(String const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pct_string_view</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>ad1cc06caf07c54b66194ba0f4a42bc99</anchor>
      <arglist>(std::nullptr_t)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pct_string_view</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>a87ef8835176b626576a57bd031f62b77</anchor>
      <arglist>(char const *s, std::size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pct_string_view</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>ab924b8e9d9cd88200ffa021cb7a7da38</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>abbe53e970ef384557c4926be9a35d3bd</anchor>
      <arglist>(pct_string_view const &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>decoded_size</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>a08f9185abeac5fe8535f6b2a543eb931</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>decode_view</type>
      <name>operator*</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>a8f4e46a6c00359c82fd29b601c556191</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>decode</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>a58c834411b4a18c55be6b987b5c7202d</anchor>
      <arglist>(encoding_opts opt={}, StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>a3645bb5033ffb1b4ed5ec4746fdcca6a</anchor>
      <arglist>(pct_string_view &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator core::string_view</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a0a8d5db5d52f2fe4e2aef0f913cd27b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string_view</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a2dfc6d958ef37cd9bc9e2d146ec4bcf0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aba80ea3646728fcd3f8f8114cd357465</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a55c1db4289f0e1e422505312eca154a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ac7e809ab8ab8cf6fb42ae11c24fddfdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ab878410a7e9f09bcd619a0fb8f6f46bf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>adb97b390d353c959d1309e8b12b9445d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>abb5f711d264c05b0dda5cbdef02ee84a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a4aa730a6b40c10741471b43d28df078f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a44448d62a5b219ef572e046a39366f7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a56d655183c6c0ce434a5110ba77c46e2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a6813deebe3a1f10ee302ae596a8dca92</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>length</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a8a3f826df9d2d059f91ba31b95fc7bd5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a35fc3de43c52b830e7d4708fd63fec27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a03fc011ccd560928c6ebddc46242d324</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>acccf68c655870a6e9e74c57e6d609881</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>afcc76716d99368576d5068cbec91791c</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>front</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a8176da759c6a3904853305b3ea342257</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>back</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a87ff7020c890c627c3bc55e340e7dbc6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a2fc40158e02535d63b70e3a37ae00019</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>copy</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a4a8d220241a776a72250d86a3923948b</anchor>
      <arglist>(char *s, size_type n, size_type pos=0) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr core::string_view</type>
      <name>substr</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a1bd1760b3edd720d2ba4bab15cd29f69</anchor>
      <arglist>(size_type pos=0, size_type n=core::string_view::npos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>af5bb1ad456fbf68eecfba3ede9211d98</anchor>
      <arglist>(core::string_view str) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a9799b80d25c5f537b4a82cd29ebe02da</anchor>
      <arglist>(size_type pos1, size_type n1, core::string_view str) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ab1954a43770761e7df6b66509c6c82d0</anchor>
      <arglist>(size_type pos1, size_type n1, core::string_view str, size_type pos2, size_type n2) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a7dae8d5f4d8c43e830dd776f293c8f8d</anchor>
      <arglist>(char const *s) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aff125bd4265eface4dd8aaf0942ffa82</anchor>
      <arglist>(size_type pos1, size_type n1, char const *s) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a3ef06a450a1628fce5fbf324a67ad842</anchor>
      <arglist>(size_type pos1, size_type n1, char const *s, size_type n2) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>starts_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ad8ac4835aedd1bade25b3ff95ef6a108</anchor>
      <arglist>(core::string_view x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>starts_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a743496a893e25f51bfa8840afcc3e7cb</anchor>
      <arglist>(char x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>starts_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a16539bf648459051827612315954c115</anchor>
      <arglist>(char const *x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ends_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a9155bdb06715f5ae4a6502d7d0ed616b</anchor>
      <arglist>(core::string_view x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ends_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ae10e0f042307aa9501e794e20e720f63</anchor>
      <arglist>(char x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ends_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a0ad4f378c382bbf69741f51c137af736</anchor>
      <arglist>(char const *x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a3ecde9a4f24fb5a0079d62339cb8d5de</anchor>
      <arglist>(core::string_view str, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a0282b3447e30d756929ece5e89b4f4e5</anchor>
      <arglist>(char c, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a2ba0513612c7087fbf675f625216f169</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a1d7114b5e641f44de80654cffdca08c1</anchor>
      <arglist>(char const *s, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rfind</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aafe32b0c841bc0f661a544c09f2f00b0</anchor>
      <arglist>(core::string_view str, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rfind</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a60edd3f19cc7d917964de474458a97cd</anchor>
      <arglist>(char c, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rfind</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a7c9bf31eba50e874ea5266344b286aab</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rfind</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>abaa9cc402b7f596c6125f1e85c5c43e1</anchor>
      <arglist>(char const *s, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ac48cc63fc31454374addfe581c4dea3f</anchor>
      <arglist>(core::string_view str, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a2eac0313132d99750596f4ed46dd4edf</anchor>
      <arglist>(char c, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ad52562d6727f177c4347a0ee8f816ff4</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a6d0d9dc2c6ad176b888f56a8fbd244ef</anchor>
      <arglist>(char const *s, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a08af87e22c7a7165a86ec70043dc44e3</anchor>
      <arglist>(core::string_view str, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ae29b07ec586d35a2c8044ec3a628e4ef</anchor>
      <arglist>(char c, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a0d8c6a440704de89dc4303e2d419020d</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>acad7dab12ad73faa70934aea5307f877</anchor>
      <arglist>(char const *s, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a6842f6be437b803876eeb0eabd074dba</anchor>
      <arglist>(core::string_view str, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>afe4a6f493c38d389d881bb5904ee4b58</anchor>
      <arglist>(char c, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a5afdfb328f1d483c379ad932a94a4c35</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a22877d0c01c2f63539ad9bf2bce198b3</anchor>
      <arglist>(char const *s, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a3ada7385a235022fac5adb57304262dc</anchor>
      <arglist>(core::string_view str, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a39bcd8c2b928527e14383c85d0144b2f</anchor>
      <arglist>(char c, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a82c5e95e890a247d1d7c19d0febc938e</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aaa4e998537ea49061f72ba0ba27d7c64</anchor>
      <arglist>(char const *s, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a4d9877bd36e7ec09f4696db021621796</anchor>
      <arglist>(core::string_view sv) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aa44594cf9e4b5d102a9e4fa501bd0781</anchor>
      <arglist>(char c) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a7c3c7eae5341b2e0f3391d5f441042a9</anchor>
      <arglist>(char const *s) const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>npos</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a5909417da2428db1bc889342ac8a2ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a3987df2bee61563de8efd9400c38b3c0</anchor>
      <arglist>(string_view_base &amp;s) noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>core::string_view</type>
      <name>s_</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a54643a19c4ac9a5441b2b1fc0bc17b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>pct_string_view</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>adc17d58b42b6b4887bf2c191a4e43d4c</anchor>
      <arglist>(char const *data, std::size_t size, std::size_t dn) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>decode_impl</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>ad926d7c652ae25ef34958ccef38095f4</anchor>
      <arglist>(string_token::arg &amp;dest, encoding_opts opt) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>dn_</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>add5b8c17110f1107467a72fae675a262</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend system::result&lt; pct_string_view &gt;</type>
      <name>make_pct_string_view</name>
      <anchorfile>classboost_1_1urls_1_1pct__string__view.html</anchorfile>
      <anchor>a713ccb8526d040feaa678c65f33cbf2a</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::grammar::range</name>
    <filename>classboost_1_1urls_1_1grammar_1_1range.html</filename>
    <templarg>class T</templarg>
    <class kind="struct">boost::urls::grammar::range::impl1</class>
    <class kind="struct">boost::urls::grammar::range::impl2</class>
    <class kind="struct">boost::urls::grammar::range::small_buffer</class>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a2b786badbc3c7ec03271dc75adff19a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const  &amp;</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>ac944fb3ce7dc3aa50d4326f7162c5e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>ac09b5057920161de09973cf2f2307a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void const  *</type>
      <name>pointer</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>ae9fe50e87b1c994e9caaa36e7d6e4c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>aad77721f518d4a1c5e5b841e3119d3dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a4254a06b880fc01cfe6ac4f2acc93ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a7fe71272b28a6bfee73f6908266cbd3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~range</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>ad2b07246701224b48e5a8a70341100ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>range</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a6972894d3850cb23597f437ac5cc0205</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>range</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a292988a5e934b3238904924929ef69bc</anchor>
      <arglist>(range &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>range</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a1009dab5a8f83dc6cebf94212e9d211a</anchor>
      <arglist>(range const &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>range &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a2e085baa51a437a85dadcb19f711f562</anchor>
      <arglist>(range &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>range &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a5e1dae12d292bbc2e3e5e9c555112ff2</anchor>
      <arglist>(range const &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a2b5dd363245c7ba7172e5fcb1a6689c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>ae1d96a5e034ca51328371a7ef29aedb9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>ab68b6bbafa3709576dd3a71eabf8d9dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a987d6513354b08bca2528ecf7f024b31</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>string</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>aa4a1146c26ccad07dc27952146b4db84</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>any_rule &amp;</type>
      <name>get</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>acc3dd4499626c2e5d7cb0cb162c87ca3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>any_rule const &amp;</type>
      <name>get</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a5a55ac87539f13449b9c19c93e793a89</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>range</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>aafaa3dc14a65c3855b2cda396a0b575e</anchor>
      <arglist>(core::string_view s, std::size_t n, R const &amp;r)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>range</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a1b545e9e7f68ccedf15e1972ba0d9cc3</anchor>
      <arglist>(core::string_view s, std::size_t n, R0 const &amp;first, R1 const &amp;next)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>small_buffer</type>
      <name>sb_</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a92fc5f9e37d4135fc14eafcf756cf4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>core::string_view</type>
      <name>s_</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a734bd6360430185daacffb7ad0f5b665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>n_</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>a71aae2e292061bab9e06cb417a773206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr std::size_t</type>
      <name>BufferSize</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>afa99aaab774576fe19f14d77bd296511</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>range_rule_t</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1range.html</anchorfile>
      <anchor>abe25649ed13b5f5b41bf83e3f0230261</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::grammar::recycled</name>
    <filename>classboost_1_1urls_1_1grammar_1_1recycled.html</filename>
    <templarg>class T</templarg>
    <class kind="struct">boost::urls::grammar::recycled::U</class>
    <member kind="function">
      <type></type>
      <name>~recycled</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled.html</anchorfile>
      <anchor>ae7ca9a4e49503c64d26d47594b07fb9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>recycled</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled.html</anchorfile>
      <anchor>ac46edc3e061fc7ef20132fcdd3a78ea2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type>U *</type>
      <name>acquire</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled.html</anchorfile>
      <anchor>af0dc019f3b046ac8e1449c64de0ce868</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>release</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled.html</anchorfile>
      <anchor>a3ba77e68c709ec00359d2805ed30f022</anchor>
      <arglist>(U *u) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>U *</type>
      <name>head_</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled.html</anchorfile>
      <anchor>ad4a2517cfab916ac566989d40603fa67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>m_</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled.html</anchorfile>
      <anchor>ab331e5c4438dee8f64cb235b00596ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>recycled_ptr</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled.html</anchorfile>
      <anchor>af2d4c24f03736007c0f45e882d27fc5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::grammar::recycled_ptr</name>
    <filename>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>~recycled_ptr</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>ad417dc12f3787dcd9214919cd32e0bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>recycled_ptr</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>ad80fa8f83c4ae6579bf06c2d3ecfc356</anchor>
      <arglist>(recycled&lt; T &gt; &amp;bin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>recycled_ptr</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a57dcf3f17054baf9eb457a75d2267da0</anchor>
      <arglist>(recycled&lt; T &gt; &amp;bin, std::nullptr_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>recycled_ptr</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a00b12076a248e8446d76e4b16e60dac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>recycled_ptr</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>ac49897f7366e9cea88d400db9f4dd3e6</anchor>
      <arglist>(std::nullptr_t) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>recycled_ptr</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a9db2bf29a2bc101e1abc7c9d6556d426</anchor>
      <arglist>(recycled_ptr const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>recycled_ptr</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>ad63b93270862cd9efa7f4b43ab9ab31a</anchor>
      <arglist>(recycled_ptr &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>recycled_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a2382036d06310301ba34c0b9be2f410f</anchor>
      <arglist>(recycled_ptr &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>recycled_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>af3277b82bc4ae578751e59100d995f04</anchor>
      <arglist>(recycled_ptr const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a0ee27cbe0f4d33adaef5adcc5fb2c27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a24fcf36a03d202754a966112778591f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>recycled&lt; T &gt; &amp;</type>
      <name>bin</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a4b264df21f5e845497f4ef581903ec33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a06713437b4f9f13da4a089b40c0c6c2d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>aff14f4ee8b3b7719cc686dd98c28a052</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a1f2199d0e31e9e8d92d543c6d6758055</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>acquire</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a046add3b0b087f3f8325103322c0b086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>aebc06db347f5e92802ee1a697cdeb0f4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>recycled&lt; T &gt;</type>
      <name>B</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a01298810622998254ae137966487e6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>typename B::U</type>
      <name>U</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a4f4fbce7a9b99c2d4dcbd03d7beb2792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>B *</type>
      <name>bin_</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a1a5f043bd8ad0ffa45f4dc4f1516de33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>U *</type>
      <name>p_</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>a3dc46110516a4a8586b0b4bac13e6960</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>recycled&lt; T &gt;</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1recycled__ptr.html</anchorfile>
      <anchor>ab664144b8f1fe3a4492ea5bc032b2d1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::segments_base</name>
    <filename>classboost_1_1urls_1_1segments__base.html</filename>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a210e592372e4f96aff4b16ae7d56626f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a2c185ae8d7e4472016ddcff590d5bbf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ad3091ef68ce40dd706fae449903d5ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a68c5672d33950cf162739c4c7410bde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a30f40461fe41c4d63af137a9ccca6863</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a1d3ecee2fe17059f4e4a5f888d9a009a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a44398449fff2a85caad49540859b11f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ac476d0b8293ea2b0dc5de6502a92f73d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_absolute</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a6ebf13225e8c6584a9ad40e760d74ef8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a79013286b3b1c7769667043e18531c2d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ad0f1719bcc8c6e418264f75f158afcef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>front</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a62e59bbce9275cbd44ee74632784dbd4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>back</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ae4a875988dc4961dbacbede45436c005</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a94e0f322ab775c5c4fc27a2c5175744f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>afd6152cd9cc0f27588021f365365500b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a8debf505f0af78e28d0640326181c0be</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>segments_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a4885869bcc4b7fba41b2c13d0c031a74</anchor>
      <arglist>(detail::path_ref const &amp;ref) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>segments_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ab9b86429934599c3c20a8fcb329a8e9d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>segments_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a23e27b1e4735206b99fadd504c329edb</anchor>
      <arglist>(segments_base const &amp;)=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type>segments_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>aa3da5f526ec0967ed4ddf51a96e48712</anchor>
      <arglist>(segments_base const &amp;)=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::path_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ad5977b35f9e8f6c53cf907765846cf0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>af842cffbb9b993e5d05e4bc74d5c2b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_ref</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a310ca7cb1df4b135729e7b4994921e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a73b05720eb367b85a0a13726205d1043</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::segments_encoded_base</name>
    <filename>classboost_1_1urls_1_1segments__encoded__base.html</filename>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>acca2c61f6f7614084ec38e56c64431d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>adfa62b2ef5b2e20b7437d64131319356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a99b7445c012e92fa277933c1c2ed6b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pct_string_view</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a58c2ed2a9cb697fba53946f5e2dd51bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pct_string_view</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a1b783bcc3a57725d2f527f419b693b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a79627a0421da8605f99844cd6f17d215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>aeafb8a7ba760f49523c8bb3d94ffb190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a04e1a25c59e6c52cc31c205f3e13c844</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_absolute</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a1e61ed9316ae7a8daba97faab25d3e85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>acc0fe9d921bfc9a8721f17ac0a9775c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>aa2e231247711b6ac41ba0c2798f929a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>front</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a139fd3bf5e8510c493f0c1f0821f8f48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>back</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>ab544bc62e3091f1193f6f7adfb812ebf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a0963aac4a3f9ba23f067e4a9e06740b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a79cde848982a29c18bb7aeb68795665c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>ac8b10c27832e4e05371ccc76be66e84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>segments_encoded_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>aee0dfc3aac9ae801f5ddefbf1879646e</anchor>
      <arglist>(detail::path_ref const &amp;ref) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>segments_encoded_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>af4ebb6005a25a41b7364239b20999fe2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>segments_encoded_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a19c00390095fb20e7d2e639280bfd61a</anchor>
      <arglist>(segments_encoded_base const &amp;)=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type>segments_encoded_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a58c185496abbb14a4ca9949bd24975d5</anchor>
      <arglist>(segments_encoded_base const &amp;)=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::path_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>ac24e476df70ac867ef02a9814a94104b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>af842cffbb9b993e5d05e4bc74d5c2b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>ad4524f4e268feb41d08e7ad697c69810</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>abd6a24997403427cb6240f18b50b33d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::segments_encoded_ref</name>
    <filename>classboost_1_1urls_1_1segments__encoded__ref.html</filename>
    <base>boost::urls::segments_encoded_base</base>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>acca2c61f6f7614084ec38e56c64431d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>adfa62b2ef5b2e20b7437d64131319356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a99b7445c012e92fa277933c1c2ed6b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pct_string_view</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a58c2ed2a9cb697fba53946f5e2dd51bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pct_string_view</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a1b783bcc3a57725d2f527f419b693b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a79627a0421da8605f99844cd6f17d215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>aeafb8a7ba760f49523c8bb3d94ffb190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>segments_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a8218d9f23fc078d0d245d775768283cc</anchor>
      <arglist>(segments_encoded_ref const &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a54936d978f620b5cdb68eab9583aa6eb</anchor>
      <arglist>(std::initializer_list&lt; pct_string_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator segments_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a35266cd8fe13f4e64661a9a7e61250d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>url</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a4d58b01b911437c9eb7dba1c125f5c1a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a39c035909f247450835a0602f6e3606f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a9ae292ac838522e7535e742bcfeb2855</anchor>
      <arglist>(std::initializer_list&lt; pct_string_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a3f9ea50e6341ed7ae062c949b739c7b2</anchor>
      <arglist>(FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>aaa084f076b25a0c1e9f6c5353d6aaeb6</anchor>
      <arglist>(iterator before, pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>aa4d0035b49814bf4ee59bfcfbc39f9fc</anchor>
      <arglist>(iterator before, std::initializer_list&lt; pct_string_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a6f7caa564093dea2c2bda5846d2c35a9</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a7912a5c198df5f1c6aab7a762fa446f3</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a481e363242210279c9725a0e37403f71</anchor>
      <arglist>(iterator first, iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a44b3829790887ca5948c117975f68514</anchor>
      <arglist>(iterator pos, pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>ad9a4c9c74df68719a147f13e8ba3559a</anchor>
      <arglist>(iterator from, iterator to, pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a47ad03ae01837ca1e32241a7b0672cd7</anchor>
      <arglist>(iterator from, iterator to, std::initializer_list&lt; pct_string_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a721cbbae32475fb3ec6a1d731f58acfb</anchor>
      <arglist>(iterator from, iterator to, FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a3bfbe442579fb0e9216c9053f2088457</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>adc73d723579f88966342103cd701e5a0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a04e1a25c59e6c52cc31c205f3e13c844</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_absolute</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a1e61ed9316ae7a8daba97faab25d3e85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>acc0fe9d921bfc9a8721f17ac0a9775c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>aa2e231247711b6ac41ba0c2798f929a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>front</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a139fd3bf5e8510c493f0c1f0821f8f48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>back</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>ab544bc62e3091f1193f6f7adfb812ebf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a0963aac4a3f9ba23f067e4a9e06740b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a79cde848982a29c18bb7aeb68795665c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a84a36ccf5a8e6ba5acd4e56f97f7a0ca</anchor>
      <arglist>(segments_encoded_ref const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>aafe93c7e306098bf66ed7c652c692fc9</anchor>
      <arglist>(segments_encoded_view const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>ac8b10c27832e4e05371ccc76be66e84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>segments_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a206f8bfa55d91c3882bd63d2578ad607</anchor>
      <arglist>(url_base &amp;u) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>af272fc29e7f0d6aa58a75697df66869b</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last, std::input_iterator_tag)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>aa1ef0db47dfa13109c35377acf460ff9</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last, std::forward_iterator_tag)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>url_base *</type>
      <name>u_</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a7bdd6037fbdefc5abc3799a53a7ece03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::path_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>ac24e476df70ac867ef02a9814a94104b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a98a5397aa18694cf4eb1ee15cc077242</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>a84a36ccf5a8e6ba5acd4e56f97f7a0ca</anchor>
      <arglist>(segments_encoded_ref const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__ref.html</anchorfile>
      <anchor>aafe93c7e306098bf66ed7c652c692fc9</anchor>
      <arglist>(segments_encoded_view const &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::segments_encoded_view</name>
    <filename>classboost_1_1urls_1_1segments__encoded__view.html</filename>
    <base>boost::urls::segments_encoded_base</base>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>acca2c61f6f7614084ec38e56c64431d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>adfa62b2ef5b2e20b7437d64131319356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a99b7445c012e92fa277933c1c2ed6b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pct_string_view</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a58c2ed2a9cb697fba53946f5e2dd51bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pct_string_view</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a1b783bcc3a57725d2f527f419b693b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a79627a0421da8605f99844cd6f17d215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>aeafb8a7ba760f49523c8bb3d94ffb190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>segments_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__view.html</anchorfile>
      <anchor>a9782a900b0afa3069303f2aaddff0de0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>segments_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__view.html</anchorfile>
      <anchor>ad404f528d1941450961dd69406651d58</anchor>
      <arglist>(segments_encoded_view const &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>segments_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__view.html</anchorfile>
      <anchor>aaec13c282fc3dc9b4dd4275f827ab373</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__view.html</anchorfile>
      <anchor>a3cbff24bd8e144c7b58052f63f192164</anchor>
      <arglist>(segments_encoded_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator segments_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__view.html</anchorfile>
      <anchor>a34089c5b73819da2aacb3e8e3b5a88a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a04e1a25c59e6c52cc31c205f3e13c844</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_absolute</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a1e61ed9316ae7a8daba97faab25d3e85</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>acc0fe9d921bfc9a8721f17ac0a9775c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>aa2e231247711b6ac41ba0c2798f929a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>front</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a139fd3bf5e8510c493f0c1f0821f8f48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>back</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>ab544bc62e3091f1193f6f7adfb812ebf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a0963aac4a3f9ba23f067e4a9e06740b4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>a79cde848982a29c18bb7aeb68795665c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>ac8b10c27832e4e05371ccc76be66e84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>segments_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__view.html</anchorfile>
      <anchor>a9bc7fd2d2eb88cc7c5cbbdaced4989bd</anchor>
      <arglist>(detail::path_ref const &amp;ref) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::path_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__base.html</anchorfile>
      <anchor>ac24e476df70ac867ef02a9814a94104b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__view.html</anchorfile>
      <anchor>af842cffbb9b993e5d05e4bc74d5c2b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__view.html</anchorfile>
      <anchor>ad4524f4e268feb41d08e7ad697c69810</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend system::result&lt; segments_encoded_view &gt;</type>
      <name>parse_path</name>
      <anchorfile>classboost_1_1urls_1_1segments__encoded__view.html</anchorfile>
      <anchor>ab922d0cc286b9d493c8636ecf728c18e</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::segments_ref</name>
    <filename>classboost_1_1urls_1_1segments__ref.html</filename>
    <base>boost::urls::segments_base</base>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a210e592372e4f96aff4b16ae7d56626f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a2c185ae8d7e4472016ddcff590d5bbf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ad3091ef68ce40dd706fae449903d5ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a68c5672d33950cf162739c4c7410bde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a30f40461fe41c4d63af137a9ccca6863</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a1d3ecee2fe17059f4e4a5f888d9a009a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a44398449fff2a85caad49540859b11f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>segments_ref</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>ad89186f09978eb823a386f6d44d73a75</anchor>
      <arglist>(segments_ref const &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>segments_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a04db277db02c5788ee8dc2403b29256b</anchor>
      <arglist>(std::initializer_list&lt; core::string_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator segments_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>aaed22bf97132b08d49b41bcfc0c958cb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>url</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>ac2276068110c5325b78fbd92bc00f8cb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>aaf2a26b43ff1a57f82b88d068ce5d82b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a41a368a21fe0d6432611f1b5fdeda9c3</anchor>
      <arglist>(std::initializer_list&lt; core::string_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a57d04e7a455e50010d53bd9fc310bf05</anchor>
      <arglist>(FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a638dc505f8ba8454f3f9a9ce038cfa45</anchor>
      <arglist>(iterator before, core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a79cbc8c8443e24e1be9d295509935a7f</anchor>
      <arglist>(iterator before, std::initializer_list&lt; core::string_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a4b3ebea35c78d880740bf22307eb4e28</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a2d69d23e417ac4a6ea2ff6af0deed500</anchor>
      <arglist>(iterator pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a91c758edc972cd7dbe4cd6e4b0adc26b</anchor>
      <arglist>(iterator first, iterator last) noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a729f1ceb8cc05f2e4da4d99d54be834d</anchor>
      <arglist>(iterator pos, core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a6cf51ab49137b7abe9cb544998942e8c</anchor>
      <arglist>(iterator from, iterator to, core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>abf4cc53df57a4e748532e22eecb660ed</anchor>
      <arglist>(iterator from, iterator to, std::initializer_list&lt; core::string_view &gt; init)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>replace</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a8bf56b7e0274dcd8878011eea0b6bf82</anchor>
      <arglist>(iterator from, iterator to, FwdIt first, FwdIt last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>aa476db35c9e274578cda2e8d06a15582</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a31f69fcfce7169123ba99cf0a2509e3f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ac476d0b8293ea2b0dc5de6502a92f73d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_absolute</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a6ebf13225e8c6584a9ad40e760d74ef8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a79013286b3b1c7769667043e18531c2d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ad0f1719bcc8c6e418264f75f158afcef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>front</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a62e59bbce9275cbd44ee74632784dbd4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>back</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ae4a875988dc4961dbacbede45436c005</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a94e0f322ab775c5c4fc27a2c5175744f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>afd6152cd9cc0f27588021f365365500b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>abe2ef77e67fefdc7c8783267f7be1fb7</anchor>
      <arglist>(segments_ref const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>segments_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>aba5e51a771fe752b9ec674e3837c6ee8</anchor>
      <arglist>(segments_view const &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a8debf505f0af78e28d0640326181c0be</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>segments_ref</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a81667700b2a724a027c99a7923fc3dac</anchor>
      <arglist>(url_base &amp;u) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a37aba63326b31acf7e6eca29cd461539</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last, std::input_iterator_tag)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a1b584e979e1a778c6f199474b74aec9a</anchor>
      <arglist>(iterator before, FwdIt first, FwdIt last, std::forward_iterator_tag)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>url_base *</type>
      <name>u_</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>af350d7ee86e36bcc7ff668b0acc09666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::path_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ad5977b35f9e8f6c53cf907765846cf0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>a98a5397aa18694cf4eb1ee15cc077242</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>ad4524f4e268feb41d08e7ad697c69810</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>segments_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>abe2ef77e67fefdc7c8783267f7be1fb7</anchor>
      <arglist>(segments_ref const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>segments_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__ref.html</anchorfile>
      <anchor>aba5e51a771fe752b9ec674e3837c6ee8</anchor>
      <arglist>(segments_view const &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::segments_view</name>
    <filename>classboost_1_1urls_1_1segments__view.html</filename>
    <base>boost::urls::segments_base</base>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a210e592372e4f96aff4b16ae7d56626f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a2c185ae8d7e4472016ddcff590d5bbf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ad3091ef68ce40dd706fae449903d5ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a68c5672d33950cf162739c4c7410bde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a30f40461fe41c4d63af137a9ccca6863</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a1d3ecee2fe17059f4e4a5f888d9a009a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a44398449fff2a85caad49540859b11f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>segments_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__view.html</anchorfile>
      <anchor>a88fb3c379b9a0f9d936cb15fa901c03a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>segments_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__view.html</anchorfile>
      <anchor>a3d940f10a27bdc6fd6ea0db628771963</anchor>
      <arglist>(segments_view const &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>segments_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__view.html</anchorfile>
      <anchor>a3111a70d6bec38ea686987b19d306be8</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>segments_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1segments__view.html</anchorfile>
      <anchor>a9b7a48490ddfc2f95df0ff344a4d2d44</anchor>
      <arglist>(segments_view const &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ac476d0b8293ea2b0dc5de6502a92f73d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_absolute</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a6ebf13225e8c6584a9ad40e760d74ef8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a79013286b3b1c7769667043e18531c2d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ad0f1719bcc8c6e418264f75f158afcef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>front</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a62e59bbce9275cbd44ee74632784dbd4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>back</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ae4a875988dc4961dbacbede45436c005</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a94e0f322ab775c5c4fc27a2c5175744f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>afd6152cd9cc0f27588021f365365500b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>a8debf505f0af78e28d0640326181c0be</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>segments_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__view.html</anchorfile>
      <anchor>a0c8056aac3092136426b96a31ccea81f</anchor>
      <arglist>(detail::path_ref const &amp;ref) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::path_ref</type>
      <name>ref_</name>
      <anchorfile>classboost_1_1urls_1_1segments__base.html</anchorfile>
      <anchor>ad5977b35f9e8f6c53cf907765846cf0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1segments__view.html</anchorfile>
      <anchor>af842cffbb9b993e5d05e4bc74d5c2b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1segments__view.html</anchorfile>
      <anchor>abd6a24997403427cb6240f18b50b33d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_ref</name>
      <anchorfile>classboost_1_1urls_1_1segments__view.html</anchorfile>
      <anchor>a310ca7cb1df4b135729e7b4994921e0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::urls::grammar::range::small_buffer</name>
    <filename>structboost_1_1urls_1_1grammar_1_1range_1_1small__buffer.html</filename>
    <member kind="function">
      <type>void const *</type>
      <name>addr</name>
      <anchorfile>structboost_1_1urls_1_1grammar_1_1range_1_1small__buffer.html</anchorfile>
      <anchor>ad1a309d4b114e13f095d65c0fe84512b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>addr</name>
      <anchorfile>structboost_1_1urls_1_1grammar_1_1range_1_1small__buffer.html</anchorfile>
      <anchor>add1a68c21a8241e1a09c8fad2f696b99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>buf</name>
      <anchorfile>structboost_1_1urls_1_1grammar_1_1range_1_1small__buffer.html</anchorfile>
      <anchor>abda106a09650bce315eb11aa12d82bb9</anchor>
      <arglist>[BufferSize]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::static_url</name>
    <filename>classboost_1_1urls_1_1static__url.html</filename>
    <templarg>std::size_t Capacity</templarg>
    <base>boost::urls::static_url_base</base>
    <member kind="function">
      <type></type>
      <name>~static_url</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a82157fdf48e896b0638144146cdecc34</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>static_url</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>ae5ac6024dd49d27eb59d0809c8e02bc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>static_url</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a2eee88df09f50dd880517b69f38ec92b</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>static_url</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>ac4dd764d8a9f213a477e8f2fe6cb9c30</anchor>
      <arglist>(static_url const &amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>static_url</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a7d8afc6122b9edd0f9b9da0a79a5c1c2</anchor>
      <arglist>(url_view_base const &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a4c821a8055f8900020c96a6d93eb520b</anchor>
      <arglist>(static_url const &amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a4019ddf436b171a84e3a3e74e9644403</anchor>
      <arglist>(url_view_base const &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_scheme</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a4d3426b592c709a3dd4e893a2679ca0b</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_scheme_id</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a24ae908a0795e86926ddb69c727eb56e</anchor>
      <arglist>(urls::scheme id)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>remove_scheme</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a119764cdfb943b5d988013e852f38d56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_encoded_authority</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a5fef28f3a61ac319a5e42718f5ddf53b</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>remove_authority</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a2ad1d71ce3bcd9ddfd2fc49f402ef31b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a9836769d164baa651b18065ac891433c</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_encoded_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a725120dac73e37ef6bcbb0961b4de6c4</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>remove_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a2fa95497213d2f519cf99ff1cbc67486</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_user</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a1b62645295ee01040667b0659e4a3ea1</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_encoded_user</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>af9117afcb2f38d41fb143c41c9ade3e4</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_password</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a3eac6eea72d1c0cf19ed3de3fab650cc</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_encoded_password</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>ab5775cc28fd5ce5942b2e4826dc252bc</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>remove_password</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>ad19cf35bf2f8c4634eaac3e2905c401d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_host</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a37a664f80c7ba0b680485e28c22bfa84</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_encoded_host</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>ab8fa942ab027fc51db4600380c983609</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_host_address</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a474645dc6c0843cdd5e32542c0089f65</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_encoded_host_address</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a973bc0912ecdaec910f7698d301d3d57</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_host_ipv4</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a0f1452422ff05a3ae64404ac13b8b41c</anchor>
      <arglist>(ipv4_address const &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_host_ipv6</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a0c5f2c6307894827a98eed0f33cfddda</anchor>
      <arglist>(ipv6_address const &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_host_ipvfuture</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a16d5dcc8068a7369c296c223b841c1fc</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_host_name</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a75a111f61372074028356d72203962d9</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_encoded_host_name</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a9e0534403374ef1f439b1b150cadc161</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_port_number</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a019bb3126279134872fcb1cd04ff741d</anchor>
      <arglist>(std::uint16_t n)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_port</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a15365dc3fb5c93f4be52bb974b53201b</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>remove_port</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>ae0f8a2ea4fd0259b66fdfc89c2febfc6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_path</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a1d2255accd1c4dd78456af11fd3a5186</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_encoded_path</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a46d13af3ad812eb04df55bb0ab503eea</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_query</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a559c3dc70b12b87c5dcc2dacdb8fe6e1</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_encoded_query</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a9c8df89166d588f69f0f4897b596bc1d</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>remove_query</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a370fd52646cda857ce85af44fb7599a4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>remove_fragment</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a03642054cbd2a8627194fcb3475d73a8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_fragment</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a135ac7d971b783199232b6ca66a65262</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>set_encoded_fragment</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a826664dbe88c8c158ba284740b8e4c15</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>remove_origin</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a3968b62c3b9d523ae60920104762bb46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>normalize</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a5665829b2e9879fcb2c61e78c22c45a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>normalize_scheme</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a807e3d24ed26fc04a3740595dcea164a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>normalize_authority</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a2aa2e85c0a0c0bfae86762f3329a25a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>normalize_path</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a79b7399df8a032d2755a4720193e5a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>normalize_query</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>a3a4ca70cc4ac8d5320f988abc33790f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>static_url &amp;</type>
      <name>normalize_fragment</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>ae8a95b70e26159714a9077852ccd4589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>c_str</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa2105bf9d0f0066827f1c13bda84d830</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>capacity</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aac6ef0aec989bc77303b2c0d6dd03c4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ad7ace028a2999faea50baa90b6d29d5f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a370fdf5fc20a09a98492b63018a921d3</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_path_absolute</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>af84b9415b211abb24134a52c53271fff</anchor>
      <arglist>(bool absolute)</arglist>
    </member>
    <member kind="function">
      <type>urls::segments_ref</type>
      <name>segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a093af27a15153929ceaf5f52cff222e7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_view</type>
      <name>segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ae579e95ac9a84069d6afb800965a79a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_ref</type>
      <name>encoded_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a72d3dc29eb37f6a1275019caab4e710a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_view</type>
      <name>encoded_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a7165388345a6d5839ca2fc235de56a2e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_ref</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a5a16e1072fcb6007bfaa4ed7d98df73f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a39fbe82213240b6fbb74324702c83c4e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_ref</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a961d8a6a1581e47ead6fffc292a22e5e</anchor>
      <arglist>(encoding_opts opt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4cc83d01478dc46b3b296b330ff84b53</anchor>
      <arglist>(encoding_opts opt) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_view</type>
      <name>encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac55ddc4d06446506f01f6c509b46edfd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_ref</type>
      <name>encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac096a414c9ab1ebd21de92887ca4d6b5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ab644560a252a8b4a7072f9fa4964d83e</anchor>
      <arglist>(std::initializer_list&lt; param_view &gt; ps) noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a100baca64a8f6957110eb819462ce3de</anchor>
      <arglist>(std::initializer_list&lt; param_pct_view &gt; ps) noexcept</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; void &gt;</type>
      <name>resolve</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aafc8c3cbca6bb5be8062e431c467ea85</anchor>
      <arglist>(url_view_base const &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a690b5118310ba9f5a576fe9d8e0d9487</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4603dc4e35575375cd03ec06115d8046</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>data</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a2d394d21149903bfeab32ea3668bbbc5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3a8844c63ecdbfd192a5b75edad2a381</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator core::string_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a101a1fe6ed2df11649427f8ad73303ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; url_view const &gt;</type>
      <name>persist</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>acc0099a8df38dc7c07092568a133f35f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae42fe23181ec960d71da4d8c3057fd82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1e48af0c38cc928ec78bd2eee3447768</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::scheme</type>
      <name>scheme_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a831a713313f5d7488e4f798d802e1102</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab457c81aa393f680577ad2dad53d80d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>authority_view</type>
      <name>authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a60a936e492fbfd5e1dabc9e41cfab0bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a043d22df5806b09a3a8c0a422d905e67</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>af4a183bfdf87f740c75c701a33fcb503</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a27123b349b4e1814c7320ce0c7117660</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a7f0e6af4eaeef95e63e00e9e86013105</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a06785caf1695eacecf369e0031734d61</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae14e18264d789e685c7e42b5becf0472</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a9d4bc2fa87a0cc143c193f4cf8c74991</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a41ebf6d946125d92257ece1dd0ac70fe</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abdb64fb7fd3cc750b4afea0cc577c874</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::host_type</type>
      <name>host_type</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a338009fc5b2924a96b801a5c39c686d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abecabf15615632bd87209f43bb018734</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3342beca1f675a83726c0e4674e70f26</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8738f92c1bbec3ab13784b06dc5dcb8c</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a788e1f19125b8a06c801d22cbe1df5c1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv4_address</type>
      <name>host_ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5655e89af7c3e47fe54c513d85a4a73b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv6_address</type>
      <name>host_ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abff163e7ca40c010af98b0d78df2eee7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>host_ipvfuture</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8037fd9b0ba81d87fb325df5c8aa31fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0a1e6638d60033869bcc0cfd4097b7d</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5b2a15ef943000de1d9d4baf794f5a3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a839dbb6fb33ed1f66b6957e4bbe293bd</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0192ef18d4eb78d73030074ee86f340</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace2a7e32badff717808b7b44af777406</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a46df8e86ed148e9a3b9a05ab75add5e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::uint16_t</type>
      <name>port_number</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a44506cc695fcaf287c094fc5c15d891e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_path_absolute</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a14436b6e134d6358b306a9a66a021365</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace04968880dd8dd4a619dd3606e3d4a5</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab8f3137c1b120786f0f41cf96e4c1577</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ad66795fb8c2c78bea2534473068cd313</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab5c33059e900592016c75d73bffdff21</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aacce86344740033d39f007ab08151f59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a0a207dc89f5b5567dfc3b7d66857c373</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4be3c1e1d45281beaa7bcf99171142b2</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a18d15d4e236cce8a6160f638590ba985</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_and_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a982fddcae8b052a9994cb367aca4fea7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_origin</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3134dd8bd84f18e51a222d84b21f8e52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_resource</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a337fd7d8a3148a9f5436afe5e705caec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_target</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aee6b90e4050b062ebb70f72fbf2bd3db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1d0d4e9ab6531ae924c59029b020be7a</anchor>
      <arglist>(url_view_base const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae62d979c65c553ece331c753181dc6c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clear_impl</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>ade1642f0c73200f5e4fe1afe15adfa14</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reserve_impl</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>a05f0290d6f45c479d50f3eb90ad2021f</anchor>
      <arglist>(std::size_t, op_t &amp;) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>aaae70edd887b71e2060794872835ef26</anchor>
      <arglist>(op_t &amp;) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>ad0d58b7fb8bd8b00ddc825a45eae7b3a</anchor>
      <arglist>(url_view_base const &amp;u)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check_invariants</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a967b64f15221fb7688ac1356cdf75cf0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>resize_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a05b00520ab18bbc8328292cea79ad4b4</anchor>
      <arglist>(int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>resize_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a5341b2b49b874a43495b5585bf887991</anchor>
      <arglist>(int, int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>shrink_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa9c4f7ad2ae8db5291401e59b35040bc</anchor>
      <arglist>(int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>shrink_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a0a3027484603f895149799f51df5051e</anchor>
      <arglist>(int, int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_scheme_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a524b1895f59d469048f90108429efe52</anchor>
      <arglist>(core::string_view, urls::scheme)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_user_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>acb42da7fccba899b093ecaaa1e82bc95</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_password_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a68dae3a0010fec7fc2d7faa13f5e0089</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_userinfo_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a238606db497afd9bd0dd2f30a6ba56d2</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_host_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aba38d157e6b179e311c7542714e5ada6</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_port_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a086b0b3086995b33ad1e406547066ae9</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_path_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a69c35f86c7e811a60db67adc5ab78af6</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>core::string_view</type>
      <name>first_segment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a93d2e3669b9e3971f9a2e1eb53668b3d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::segments_iter_impl</type>
      <name>edit_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac2c71ff54e69e28ec9b4f736e76de376</anchor>
      <arglist>(detail::segments_iter_impl const &amp;, detail::segments_iter_impl const &amp;, detail::any_segments_iter &amp;&amp;it0, int absolute=-1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>auto</type>
      <name>edit_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aab5a26a3b42b0e7a4ed9a8bee64ce068</anchor>
      <arglist>(detail::params_iter_impl const &amp;, detail::params_iter_impl const &amp;, detail::any_params_iter &amp;&amp;) -&gt; detail::params_iter_impl</arglist>
    </member>
    <member kind="function" protection="private">
      <type>system::result&lt; void &gt;</type>
      <name>resolve_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>abb96840837100126fee974b7e04b6f6c</anchor>
      <arglist>(url_view_base const &amp;base, url_view_base const &amp;ref)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>normalize_octets_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a66a041dd584069699256993322d82a2c</anchor>
      <arglist>(int, CharSet const &amp;allowed, op_t &amp;) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>decoded_to_lower_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa36b51bdd9c0efe397e4e24d366dff39</anchor>
      <arglist>(int id) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>to_lower_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a0627d599dd98b76d4cb8309f751a3a7b</anchor>
      <arglist>(int id) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::size_t</type>
      <name>digest</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a6185ed21fd341838ea90d9391a6f4251</anchor>
      <arglist>(std::size_t=0) const noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>segments_compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4214dee20c9c62cbe286b868f1f705a7</anchor>
      <arglist>(segments_encoded_view seg0, segments_encoded_view seg1) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>buf_</name>
      <anchorfile>classboost_1_1urls_1_1static__url.html</anchorfile>
      <anchor>ae9f03c3c97ea410408c50bd40dbffadd</anchor>
      <arglist>[Capacity+1]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>s_</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ab30db710868a200e9adc60e1ede1457b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>cap_</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a6dbd1a65141115ff15e1ea75110afeaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl</type>
      <name>impl_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a748ab60d0c2c544fdf81b3d81a10c079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl const  *</type>
      <name>pi_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aa41d293a4507db2e988646b208369e2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::static_url_base</name>
    <filename>classboost_1_1urls_1_1static__url__base.html</filename>
    <base>boost::urls::url_base</base>
    <member kind="function">
      <type>char const *</type>
      <name>c_str</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa2105bf9d0f0066827f1c13bda84d830</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>capacity</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aac6ef0aec989bc77303b2c0d6dd03c4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ad7ace028a2999faea50baa90b6d29d5f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a370fdf5fc20a09a98492b63018a921d3</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa0939fc6b18e1b5aa44fd59d4aaf5d7e</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_scheme_id</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a63c760a15a6bf9878855118afba81274</anchor>
      <arglist>(scheme id)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a0a66323a16c97faeec51497f420bde14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a6cc3e038d5499ac3b0bc4d04ac399554</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a1ddde16184fed1fd7c6e4f8e5f96a9c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a7c6a3a95ac55debb720459bb61f20572</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>acf965292f0f14788f20a802785f801a5</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a4bb938160aa4078e9b525799e07b8cea</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_user</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>af235ce213a2a5f2583b53e0bccab2d4b</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_user</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ad773af746b7589a9ee22c520062b8bd4</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_password</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a13eb280c6170bf7f40731f9eb93cd767</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_password</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ab545da9e9f3355b4e2fa94c67f704a34</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_password</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a825eca148bad717ead0d80da1cb72947</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aaf05628d3b6a6887558653953765dee9</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_host</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa9f3e4bc9b6073fd21ba98154e94b2be</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a7a0968296545d44002bcecbcf4f53bf1</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a271a24bd13805de80e983b4c2a7ea6f4</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host_ipv4</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a852ca1f6b4ff91b8ba02f8b04cfd4b95</anchor>
      <arglist>(ipv4_address const &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host_ipv6</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a541e42112adabc635936491b738e9679</anchor>
      <arglist>(ipv6_address const &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host_ipvfuture</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aea6bcaa449f77cf4f99b9a6341568393</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ae2972a298c591b0c78a95a46611b1404</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>afaba67fb4ecb28a77a037776040eac3a</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_port_number</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a04b73d68602b56e2829a3fb1cb0fccff</anchor>
      <arglist>(std::uint16_t n)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_port</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac4db7aa88d1ff44341856cf5ec88a4b3</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_port</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a4e484607857ddaad38b86ab91110b97f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_path_absolute</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>af84b9415b211abb24134a52c53271fff</anchor>
      <arglist>(bool absolute)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_path</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a61ceb137803ce84c516352284882e867</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_path</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a47802f22d56833ee9068bb1b69e7bb74</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>urls::segments_ref</type>
      <name>segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a093af27a15153929ceaf5f52cff222e7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_view</type>
      <name>segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ae579e95ac9a84069d6afb800965a79a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_ref</type>
      <name>encoded_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a72d3dc29eb37f6a1275019caab4e710a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_view</type>
      <name>encoded_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a7165388345a6d5839ca2fc235de56a2e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_query</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>afff6c5a124c784624f59525c19c80c20</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_query</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a86492f4399395190119f2f2673156e4b</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>params_ref</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a5a16e1072fcb6007bfaa4ed7d98df73f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a39fbe82213240b6fbb74324702c83c4e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_ref</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a961d8a6a1581e47ead6fffc292a22e5e</anchor>
      <arglist>(encoding_opts opt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4cc83d01478dc46b3b296b330ff84b53</anchor>
      <arglist>(encoding_opts opt) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_view</type>
      <name>encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac55ddc4d06446506f01f6c509b46edfd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_ref</type>
      <name>encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac096a414c9ab1ebd21de92887ca4d6b5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ab644560a252a8b4a7072f9fa4964d83e</anchor>
      <arglist>(std::initializer_list&lt; param_view &gt; ps) noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a100baca64a8f6957110eb819462ce3de</anchor>
      <arglist>(std::initializer_list&lt; param_pct_view &gt; ps) noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_query</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac73516defdfd8e4940ab1a283a1445be</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a4f4923c76342325bde6fc66174f4b05c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a466ee18c0cabd8a0a7b038591d7231d4</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a6427119d6f64ebeacff4d38161d4f12c</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_origin</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>af59fa1734e5071132a1c4a8287cb00ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a9dc84d61b5f11ae0b7900eb61e4eedce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a759bb7c1f145b5d5798248a2b8b9d3a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a62ab3805daab3d43a09a1f0cc6143b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize_path</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a621b7d1c9ea085d32a956802c26d97a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize_query</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a77822aa1f9b24ddeb3ef974c0bebb27f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a978a8644cdedbd9dcbbba90e35695dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; void &gt;</type>
      <name>resolve</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aafc8c3cbca6bb5be8062e431c467ea85</anchor>
      <arglist>(url_view_base const &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a690b5118310ba9f5a576fe9d8e0d9487</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4603dc4e35575375cd03ec06115d8046</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>data</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a2d394d21149903bfeab32ea3668bbbc5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3a8844c63ecdbfd192a5b75edad2a381</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator core::string_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a101a1fe6ed2df11649427f8ad73303ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; url_view const &gt;</type>
      <name>persist</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>acc0099a8df38dc7c07092568a133f35f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae42fe23181ec960d71da4d8c3057fd82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1e48af0c38cc928ec78bd2eee3447768</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::scheme</type>
      <name>scheme_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a831a713313f5d7488e4f798d802e1102</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab457c81aa393f680577ad2dad53d80d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>authority_view</type>
      <name>authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a60a936e492fbfd5e1dabc9e41cfab0bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a043d22df5806b09a3a8c0a422d905e67</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>af4a183bfdf87f740c75c701a33fcb503</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a27123b349b4e1814c7320ce0c7117660</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a7f0e6af4eaeef95e63e00e9e86013105</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a06785caf1695eacecf369e0031734d61</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae14e18264d789e685c7e42b5becf0472</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a9d4bc2fa87a0cc143c193f4cf8c74991</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a41ebf6d946125d92257ece1dd0ac70fe</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abdb64fb7fd3cc750b4afea0cc577c874</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::host_type</type>
      <name>host_type</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a338009fc5b2924a96b801a5c39c686d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abecabf15615632bd87209f43bb018734</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3342beca1f675a83726c0e4674e70f26</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8738f92c1bbec3ab13784b06dc5dcb8c</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a788e1f19125b8a06c801d22cbe1df5c1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv4_address</type>
      <name>host_ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5655e89af7c3e47fe54c513d85a4a73b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv6_address</type>
      <name>host_ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abff163e7ca40c010af98b0d78df2eee7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>host_ipvfuture</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8037fd9b0ba81d87fb325df5c8aa31fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0a1e6638d60033869bcc0cfd4097b7d</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5b2a15ef943000de1d9d4baf794f5a3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a839dbb6fb33ed1f66b6957e4bbe293bd</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0192ef18d4eb78d73030074ee86f340</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace2a7e32badff717808b7b44af777406</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a46df8e86ed148e9a3b9a05ab75add5e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::uint16_t</type>
      <name>port_number</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a44506cc695fcaf287c094fc5c15d891e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_path_absolute</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a14436b6e134d6358b306a9a66a021365</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace04968880dd8dd4a619dd3606e3d4a5</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab8f3137c1b120786f0f41cf96e4c1577</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ad66795fb8c2c78bea2534473068cd313</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab5c33059e900592016c75d73bffdff21</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aacce86344740033d39f007ab08151f59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a0a207dc89f5b5567dfc3b7d66857c373</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4be3c1e1d45281beaa7bcf99171142b2</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a18d15d4e236cce8a6160f638590ba985</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_and_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a982fddcae8b052a9994cb367aca4fea7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_origin</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3134dd8bd84f18e51a222d84b21f8e52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_resource</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a337fd7d8a3148a9f5436afe5e705caec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_target</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aee6b90e4050b062ebb70f72fbf2bd3db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1d0d4e9ab6531ae924c59029b020be7a</anchor>
      <arglist>(url_view_base const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae62d979c65c553ece331c753181dc6c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>~static_url_base</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>aad336a87a8c993da2384f16c2fdb03df</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>static_url_base</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>abf7ab7c70fc683dd957c6f00801602d0</anchor>
      <arglist>(char *buf, std::size_t cap) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>static_url_base</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>a4d6edcf1eb63bc55f50b05fad27989d1</anchor>
      <arglist>(char *buf, std::size_t cap, core::string_view s)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clear_impl</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>ade1642f0c73200f5e4fe1afe15adfa14</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reserve_impl</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>a05f0290d6f45c479d50f3eb90ad2021f</anchor>
      <arglist>(std::size_t, op_t &amp;) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>aaae70edd887b71e2060794872835ef26</anchor>
      <arglist>(op_t &amp;) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>ad0d58b7fb8bd8b00ddc825a45eae7b3a</anchor>
      <arglist>(url_view_base const &amp;u)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check_invariants</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a967b64f15221fb7688ac1356cdf75cf0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>resize_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a05b00520ab18bbc8328292cea79ad4b4</anchor>
      <arglist>(int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>resize_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a5341b2b49b874a43495b5585bf887991</anchor>
      <arglist>(int, int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>shrink_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa9c4f7ad2ae8db5291401e59b35040bc</anchor>
      <arglist>(int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>shrink_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a0a3027484603f895149799f51df5051e</anchor>
      <arglist>(int, int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_scheme_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a524b1895f59d469048f90108429efe52</anchor>
      <arglist>(core::string_view, urls::scheme)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_user_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>acb42da7fccba899b093ecaaa1e82bc95</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_password_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a68dae3a0010fec7fc2d7faa13f5e0089</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_userinfo_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a238606db497afd9bd0dd2f30a6ba56d2</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_host_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aba38d157e6b179e311c7542714e5ada6</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_port_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a086b0b3086995b33ad1e406547066ae9</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_path_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a69c35f86c7e811a60db67adc5ab78af6</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>core::string_view</type>
      <name>first_segment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a93d2e3669b9e3971f9a2e1eb53668b3d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::segments_iter_impl</type>
      <name>edit_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac2c71ff54e69e28ec9b4f736e76de376</anchor>
      <arglist>(detail::segments_iter_impl const &amp;, detail::segments_iter_impl const &amp;, detail::any_segments_iter &amp;&amp;it0, int absolute=-1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>auto</type>
      <name>edit_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aab5a26a3b42b0e7a4ed9a8bee64ce068</anchor>
      <arglist>(detail::params_iter_impl const &amp;, detail::params_iter_impl const &amp;, detail::any_params_iter &amp;&amp;) -&gt; detail::params_iter_impl</arglist>
    </member>
    <member kind="function" protection="private">
      <type>system::result&lt; void &gt;</type>
      <name>resolve_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>abb96840837100126fee974b7e04b6f6c</anchor>
      <arglist>(url_view_base const &amp;base, url_view_base const &amp;ref)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>normalize_octets_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a66a041dd584069699256993322d82a2c</anchor>
      <arglist>(int, CharSet const &amp;allowed, op_t &amp;) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>decoded_to_lower_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa36b51bdd9c0efe397e4e24d366dff39</anchor>
      <arglist>(int id) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>to_lower_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a0627d599dd98b76d4cb8309f751a3a7b</anchor>
      <arglist>(int id) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::size_t</type>
      <name>digest</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a6185ed21fd341838ea90d9391a6f4251</anchor>
      <arglist>(std::size_t=0) const noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>segments_compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4214dee20c9c62cbe286b868f1f705a7</anchor>
      <arglist>(segments_encoded_view seg0, segments_encoded_view seg1) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>s_</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ab30db710868a200e9adc60e1ede1457b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>cap_</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a6dbd1a65141115ff15e1ea75110afeaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl</type>
      <name>impl_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a748ab60d0c2c544fdf81b3d81a10c079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl const  *</type>
      <name>pi_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aa41d293a4507db2e988646b208369e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>static_url</name>
      <anchorfile>classboost_1_1urls_1_1static__url__base.html</anchorfile>
      <anchor>ad4732b46da17096c7dc6ee047be2655e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::grammar::string_view_base</name>
    <filename>classboost_1_1urls_1_1grammar_1_1string__view__base.html</filename>
    <member kind="typedef">
      <type>std::char_traits&lt; char &gt;</type>
      <name>traits_type</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a06219a8ef208528a1bd98580e8496424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>value_type</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>af243d0051bf1d1ec4712ba2a0a3bb048</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char *</type>
      <name>pointer</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aa3c78c1df65b2e81cd7b9841fa68966a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  *</type>
      <name>const_pointer</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a04f2df101e42c0cc77d2769fe0ceb155</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char &amp;</type>
      <name>reference</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aab04b6ff4583419e5b740947271d91c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a34104028451718493a1890549c1f4638</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  *</type>
      <name>const_iterator</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>addea9ce54c0ddf32568442362f24b753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_iterator</type>
      <name>iterator</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>adcd339ccf116c157b6d02c53de88f6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a1faa940e5e96b7b99cea5aedf7c5c5cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ae0c9469ed5a3461bdd056f92716d1029</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ac4400f988ebeb8e152f3b8fbbfa3b874</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a4cfefd99a9686d7de635e0fa15ba9614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator core::string_view</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a0a8d5db5d52f2fe4e2aef0f913cd27b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string_view</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a2dfc6d958ef37cd9bc9e2d146ec4bcf0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aba80ea3646728fcd3f8f8114cd357465</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a55c1db4289f0e1e422505312eca154a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ac7e809ab8ab8cf6fb42ae11c24fddfdc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ab878410a7e9f09bcd619a0fb8f6f46bf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>cend</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>adb97b390d353c959d1309e8b12b9445d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>abb5f711d264c05b0dda5cbdef02ee84a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a4aa730a6b40c10741471b43d28df078f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a44448d62a5b219ef572e046a39366f7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a56d655183c6c0ce434a5110ba77c46e2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a6813deebe3a1f10ee302ae596a8dca92</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>length</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a8a3f826df9d2d059f91ba31b95fc7bd5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a35fc3de43c52b830e7d4708fd63fec27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a03fc011ccd560928c6ebddc46242d324</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>acccf68c655870a6e9e74c57e6d609881</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>afcc76716d99368576d5068cbec91791c</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>front</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a8176da759c6a3904853305b3ea342257</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>back</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a87ff7020c890c627c3bc55e340e7dbc6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a2fc40158e02535d63b70e3a37ae00019</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>copy</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a4a8d220241a776a72250d86a3923948b</anchor>
      <arglist>(char *s, size_type n, size_type pos=0) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr core::string_view</type>
      <name>substr</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a1bd1760b3edd720d2ba4bab15cd29f69</anchor>
      <arglist>(size_type pos=0, size_type n=core::string_view::npos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>af5bb1ad456fbf68eecfba3ede9211d98</anchor>
      <arglist>(core::string_view str) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a9799b80d25c5f537b4a82cd29ebe02da</anchor>
      <arglist>(size_type pos1, size_type n1, core::string_view str) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ab1954a43770761e7df6b66509c6c82d0</anchor>
      <arglist>(size_type pos1, size_type n1, core::string_view str, size_type pos2, size_type n2) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a7dae8d5f4d8c43e830dd776f293c8f8d</anchor>
      <arglist>(char const *s) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aff125bd4265eface4dd8aaf0942ffa82</anchor>
      <arglist>(size_type pos1, size_type n1, char const *s) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a3ef06a450a1628fce5fbf324a67ad842</anchor>
      <arglist>(size_type pos1, size_type n1, char const *s, size_type n2) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>starts_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ad8ac4835aedd1bade25b3ff95ef6a108</anchor>
      <arglist>(core::string_view x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>starts_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a743496a893e25f51bfa8840afcc3e7cb</anchor>
      <arglist>(char x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>starts_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a16539bf648459051827612315954c115</anchor>
      <arglist>(char const *x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ends_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a9155bdb06715f5ae4a6502d7d0ed616b</anchor>
      <arglist>(core::string_view x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ends_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ae10e0f042307aa9501e794e20e720f63</anchor>
      <arglist>(char x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ends_with</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a0ad4f378c382bbf69741f51c137af736</anchor>
      <arglist>(char const *x) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a3ecde9a4f24fb5a0079d62339cb8d5de</anchor>
      <arglist>(core::string_view str, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a0282b3447e30d756929ece5e89b4f4e5</anchor>
      <arglist>(char c, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a2ba0513612c7087fbf675f625216f169</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a1d7114b5e641f44de80654cffdca08c1</anchor>
      <arglist>(char const *s, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rfind</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aafe32b0c841bc0f661a544c09f2f00b0</anchor>
      <arglist>(core::string_view str, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rfind</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a60edd3f19cc7d917964de474458a97cd</anchor>
      <arglist>(char c, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rfind</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a7c9bf31eba50e874ea5266344b286aab</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rfind</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>abaa9cc402b7f596c6125f1e85c5c43e1</anchor>
      <arglist>(char const *s, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ac48cc63fc31454374addfe581c4dea3f</anchor>
      <arglist>(core::string_view str, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a2eac0313132d99750596f4ed46dd4edf</anchor>
      <arglist>(char c, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ad52562d6727f177c4347a0ee8f816ff4</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a6d0d9dc2c6ad176b888f56a8fbd244ef</anchor>
      <arglist>(char const *s, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a08af87e22c7a7165a86ec70043dc44e3</anchor>
      <arglist>(core::string_view str, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ae29b07ec586d35a2c8044ec3a628e4ef</anchor>
      <arglist>(char c, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a0d8c6a440704de89dc4303e2d419020d</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>acad7dab12ad73faa70934aea5307f877</anchor>
      <arglist>(char const *s, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a6842f6be437b803876eeb0eabd074dba</anchor>
      <arglist>(core::string_view str, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>afe4a6f493c38d389d881bb5904ee4b58</anchor>
      <arglist>(char c, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a5afdfb328f1d483c379ad932a94a4c35</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a22877d0c01c2f63539ad9bf2bce198b3</anchor>
      <arglist>(char const *s, size_type pos=0) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a3ada7385a235022fac5adb57304262dc</anchor>
      <arglist>(core::string_view str, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a39bcd8c2b928527e14383c85d0144b2f</anchor>
      <arglist>(char c, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a82c5e95e890a247d1d7c19d0febc938e</anchor>
      <arglist>(char const *s, size_type pos, size_type n) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aaa4e998537ea49061f72ba0ba27d7c64</anchor>
      <arglist>(char const *s, size_type pos=core::string_view::npos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a4d9877bd36e7ec09f4696db021621796</anchor>
      <arglist>(core::string_view sv) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>aa44594cf9e4b5d102a9e4fa501bd0781</anchor>
      <arglist>(char c) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>contains</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a7c3c7eae5341b2e0f3391d5f441042a9</anchor>
      <arglist>(char const *s) const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>npos</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a5909417da2428db1bc889342ac8a2ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constexpr</type>
      <name>string_view_base</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ad97e88fd36bc9eb321fec4e1f963ce31</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constexpr</type>
      <name>string_view_base</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ac4ff93e75e8278a0cba365c5f867fcf5</anchor>
      <arglist>(char const *data, std::size_t size) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a3987df2bee61563de8efd9400c38b3c0</anchor>
      <arglist>(string_view_base &amp;s) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>string_view_base</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ab5fdeeabe9ef0aacb91ba1ddca4db3af</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>string_view_base</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a9721a26fe6e9a884270d02718b54bd5f</anchor>
      <arglist>(string_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a01479fb81c39b7c99dc49a38f718e048</anchor>
      <arglist>(string_view_base const &amp;)=default</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>core::string_view</type>
      <name>s_</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a54643a19c4ac9a5441b2b1fc0bc17b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::size_t</type>
      <name>hash_value</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>a66bad7175625d632b26c4e17a053d6c1</anchor>
      <arglist>(string_view_base const &amp;s) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classboost_1_1urls_1_1grammar_1_1string__view__base.html</anchorfile>
      <anchor>ad2924112491d9b7b21de69014b1546d4</anchor>
      <arglist>(std::ostream &amp;os, string_view_base const &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::urls::grammar::recycled::U</name>
    <filename>structboost_1_1urls_1_1grammar_1_1recycled_1_1U.html</filename>
    <member kind="function">
      <type></type>
      <name>U</name>
      <anchorfile>structboost_1_1urls_1_1grammar_1_1recycled_1_1U.html</anchorfile>
      <anchor>ab5eb739da580544c3033cf948bb09b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>t</name>
      <anchorfile>structboost_1_1urls_1_1grammar_1_1recycled_1_1U.html</anchorfile>
      <anchor>a9c401cb660bce5365643efc62e878f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>U *</type>
      <name>next</name>
      <anchorfile>structboost_1_1urls_1_1grammar_1_1recycled_1_1U.html</anchorfile>
      <anchor>ae73533b7dfae919b504568a9622867cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::atomic&lt; std::size_t &gt;</type>
      <name>refs</name>
      <anchorfile>structboost_1_1urls_1_1grammar_1_1recycled_1_1U.html</anchorfile>
      <anchor>ace1b1d3c4d42e8577dd5e30b0303f5c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::urls::grammar::unsigned_rule</name>
    <filename>structboost_1_1urls_1_1grammar_1_1unsigned__rule.html</filename>
    <templarg>class Unsigned</templarg>
  </compound>
  <compound kind="class">
    <name>boost::urls::url</name>
    <filename>classboost_1_1urls_1_1url.html</filename>
    <base>boost::urls::url_base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~url</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ad9a5e5414ddf7043591b31bfc3a19ea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>url</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a49b24017bbef7a2c1d502cca692155e9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>url</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a6a3ee2d0f0ee75cc7b3c035fd4280147</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>url</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ad2fce1c8bcf89a08dc12d32e8b1301c7</anchor>
      <arglist>(url &amp;&amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>url</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ae01cbee57ba779dfbfdd9d2cf88b7bb5</anchor>
      <arglist>(url_view_base const &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>url</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ac3bf9c2242071d9a60c1bae18224bb8e</anchor>
      <arglist>(url const &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a44941ec157aa916ad3ab7fe753e8afd7</anchor>
      <arglist>(url &amp;&amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>aeaeb29ab3db4ff91372346e84e39c27b</anchor>
      <arglist>(url_view_base const &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ac10d5ce04c271303d74ef1bc3ebb1be1</anchor>
      <arglist>(url const &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ac040e8f83c617441f2af9b946a695d6e</anchor>
      <arglist>(url &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a93449fdcc814344bf534b716ef032c07</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_scheme_id</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a5771d5441e436f1627b6b547a94a79cb</anchor>
      <arglist>(urls::scheme id)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>remove_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ac6ecf30fa6572146e24e4080f3718edd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_encoded_authority</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ac03ed5ece60be9ac866c37dba4ad0753</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>remove_authority</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a28597f946e053655962b55817ecce0f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>abbd730656a511010349bdd92c30f8014</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_encoded_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>adca01cbec8c2a4b818df6ce5793a39e8</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>remove_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>af644579fe6fbe7ed7cf478875aa27223</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_user</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a7678d23417f7baef758f145672293ab0</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_encoded_user</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>af8c315680d078a53d85f3d352080db7d</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_password</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>aacf43f81b160636326f3541195ff63fa</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_encoded_password</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>acd056378c046f658b3ebb4bfb4193b00</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>remove_password</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>af6c5d9acbc4cce877f2ab9a5a133f9a2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_host</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>adb384c83e67a6df7fe1dca1116ef5d96</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_encoded_host</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a62deec288f17267e0cbd5204be8405ac</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a21216673ac1fe8e7c2421b96c216706c</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_encoded_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a2294a37d83a4c3811b2e522a4ad49753</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_host_ipv4</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a31d0b41538374e423ba7eecbde828c52</anchor>
      <arglist>(ipv4_address const &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_host_ipv6</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a6eb7a5b9e0642d840e995ec95ab2c700</anchor>
      <arglist>(ipv6_address const &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_host_ipvfuture</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ae60426b83e2c68f82289f14c52d6f56e</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ab3b75cd0e85ff6cb61c397f74587e9de</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_encoded_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>aa05db9c9159f0f2b99535f25eb0bc4ab</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_port_number</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a8e955991be8bb43818cad3ba70533df6</anchor>
      <arglist>(std::uint16_t n)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_port</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ae07a2c39f1ccf433a2a1e635124f7ae2</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>remove_port</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a05fdf0c9e2146a420e613908c6b11c71</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_path</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a178fd666a22de8ca15fb1b006f0af050</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_encoded_path</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>aa9719c9f21439ee86e5d2b4bd865af68</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_query</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>aa02a48aa08efbead2aa3110e330435c5</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_encoded_query</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a35cbc4d6e401e3ec7e692634e6972c3c</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_params</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>af27601d6ebc15e9174cba0da2d313ac5</anchor>
      <arglist>(std::initializer_list&lt; param_view &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>acb2c611c20df5f4be990d423460f4774</anchor>
      <arglist>(std::initializer_list&lt; param_pct_view &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>remove_query</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>aed552c72a1df0bc0d33300dc8a7d79e8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>remove_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>aa08889656822eb1ed5735ff86d8d6f69</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a9cde19adef7022c9c1cf817dd56e5abf</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>set_encoded_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>acfa389abe2f5c7a16b1f6fce884e655a</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>remove_origin</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>aba929113d751fa55ee246a616565f88a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>normalize</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a5cae375a3774bd200191f1a2a0c80a62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>normalize_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>aa5b9a6ecb5a4d0d06f3fa62d4e3d1150</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>normalize_authority</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a4f637775f051d5c8bdb8a3bc5909e097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>normalize_path</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a64d8a0b4493c91eca218e3265abe2a59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>normalize_query</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a2d17ed8baf3bebc1ce44853e08eed0ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url &amp;</type>
      <name>normalize_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>aa897ba8831bee22471b21b0bf0fb806a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>c_str</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa2105bf9d0f0066827f1c13bda84d830</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>capacity</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aac6ef0aec989bc77303b2c0d6dd03c4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ad7ace028a2999faea50baa90b6d29d5f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a370fdf5fc20a09a98492b63018a921d3</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_path_absolute</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>af84b9415b211abb24134a52c53271fff</anchor>
      <arglist>(bool absolute)</arglist>
    </member>
    <member kind="function">
      <type>urls::segments_ref</type>
      <name>segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a093af27a15153929ceaf5f52cff222e7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_view</type>
      <name>segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ae579e95ac9a84069d6afb800965a79a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_ref</type>
      <name>encoded_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a72d3dc29eb37f6a1275019caab4e710a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_view</type>
      <name>encoded_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a7165388345a6d5839ca2fc235de56a2e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_ref</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a5a16e1072fcb6007bfaa4ed7d98df73f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a39fbe82213240b6fbb74324702c83c4e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_ref</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a961d8a6a1581e47ead6fffc292a22e5e</anchor>
      <arglist>(encoding_opts opt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4cc83d01478dc46b3b296b330ff84b53</anchor>
      <arglist>(encoding_opts opt) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_view</type>
      <name>encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac55ddc4d06446506f01f6c509b46edfd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_ref</type>
      <name>encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac096a414c9ab1ebd21de92887ca4d6b5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; void &gt;</type>
      <name>resolve</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aafc8c3cbca6bb5be8062e431c467ea85</anchor>
      <arglist>(url_view_base const &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a690b5118310ba9f5a576fe9d8e0d9487</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4603dc4e35575375cd03ec06115d8046</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>data</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a2d394d21149903bfeab32ea3668bbbc5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3a8844c63ecdbfd192a5b75edad2a381</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator core::string_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a101a1fe6ed2df11649427f8ad73303ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; url_view const &gt;</type>
      <name>persist</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>acc0099a8df38dc7c07092568a133f35f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae42fe23181ec960d71da4d8c3057fd82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1e48af0c38cc928ec78bd2eee3447768</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::scheme</type>
      <name>scheme_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a831a713313f5d7488e4f798d802e1102</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab457c81aa393f680577ad2dad53d80d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>authority_view</type>
      <name>authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a60a936e492fbfd5e1dabc9e41cfab0bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a043d22df5806b09a3a8c0a422d905e67</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>af4a183bfdf87f740c75c701a33fcb503</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a27123b349b4e1814c7320ce0c7117660</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a7f0e6af4eaeef95e63e00e9e86013105</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a06785caf1695eacecf369e0031734d61</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae14e18264d789e685c7e42b5becf0472</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a9d4bc2fa87a0cc143c193f4cf8c74991</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a41ebf6d946125d92257ece1dd0ac70fe</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abdb64fb7fd3cc750b4afea0cc577c874</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::host_type</type>
      <name>host_type</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a338009fc5b2924a96b801a5c39c686d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abecabf15615632bd87209f43bb018734</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3342beca1f675a83726c0e4674e70f26</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8738f92c1bbec3ab13784b06dc5dcb8c</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a788e1f19125b8a06c801d22cbe1df5c1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv4_address</type>
      <name>host_ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5655e89af7c3e47fe54c513d85a4a73b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv6_address</type>
      <name>host_ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abff163e7ca40c010af98b0d78df2eee7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>host_ipvfuture</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8037fd9b0ba81d87fb325df5c8aa31fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0a1e6638d60033869bcc0cfd4097b7d</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5b2a15ef943000de1d9d4baf794f5a3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a839dbb6fb33ed1f66b6957e4bbe293bd</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0192ef18d4eb78d73030074ee86f340</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace2a7e32badff717808b7b44af777406</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a46df8e86ed148e9a3b9a05ab75add5e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::uint16_t</type>
      <name>port_number</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a44506cc695fcaf287c094fc5c15d891e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_path_absolute</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a14436b6e134d6358b306a9a66a021365</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace04968880dd8dd4a619dd3606e3d4a5</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab8f3137c1b120786f0f41cf96e4c1577</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ad66795fb8c2c78bea2534473068cd313</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab5c33059e900592016c75d73bffdff21</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aacce86344740033d39f007ab08151f59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a0a207dc89f5b5567dfc3b7d66857c373</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4be3c1e1d45281beaa7bcf99171142b2</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a18d15d4e236cce8a6160f638590ba985</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_and_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a982fddcae8b052a9994cb367aca4fea7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_origin</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3134dd8bd84f18e51a222d84b21f8e52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_resource</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a337fd7d8a3148a9f5436afe5e705caec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_target</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aee6b90e4050b062ebb70f72fbf2bd3db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1d0d4e9ab6531ae924c59029b020be7a</anchor>
      <arglist>(url_view_base const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae62d979c65c553ece331c753181dc6c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>allocate</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a98a190c58624c865b7a5e91937534a27</anchor>
      <arglist>(std::size_t)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>ad63122fa7c1b29159a5b1c78f5217fea</anchor>
      <arglist>(char *s)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clear_impl</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>aefd734d2a1ca764ac8adb57859373df4</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reserve_impl</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>adbe938c7280407a158c56e61a77a40c0</anchor>
      <arglist>(std::size_t, op_t &amp;) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a609538987411af75a1b858f613c2bd57</anchor>
      <arglist>(op_t &amp;) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a778a556b6896b021914e1e5d35250354</anchor>
      <arglist>(url_view_base const &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check_invariants</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a967b64f15221fb7688ac1356cdf75cf0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>resize_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a05b00520ab18bbc8328292cea79ad4b4</anchor>
      <arglist>(int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>resize_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a5341b2b49b874a43495b5585bf887991</anchor>
      <arglist>(int, int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>shrink_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa9c4f7ad2ae8db5291401e59b35040bc</anchor>
      <arglist>(int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>shrink_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a0a3027484603f895149799f51df5051e</anchor>
      <arglist>(int, int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_scheme_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a524b1895f59d469048f90108429efe52</anchor>
      <arglist>(core::string_view, urls::scheme)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_user_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>acb42da7fccba899b093ecaaa1e82bc95</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_password_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a68dae3a0010fec7fc2d7faa13f5e0089</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_userinfo_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a238606db497afd9bd0dd2f30a6ba56d2</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_host_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aba38d157e6b179e311c7542714e5ada6</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_port_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a086b0b3086995b33ad1e406547066ae9</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_path_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a69c35f86c7e811a60db67adc5ab78af6</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>core::string_view</type>
      <name>first_segment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a93d2e3669b9e3971f9a2e1eb53668b3d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::segments_iter_impl</type>
      <name>edit_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac2c71ff54e69e28ec9b4f736e76de376</anchor>
      <arglist>(detail::segments_iter_impl const &amp;, detail::segments_iter_impl const &amp;, detail::any_segments_iter &amp;&amp;it0, int absolute=-1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>auto</type>
      <name>edit_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aab5a26a3b42b0e7a4ed9a8bee64ce068</anchor>
      <arglist>(detail::params_iter_impl const &amp;, detail::params_iter_impl const &amp;, detail::any_params_iter &amp;&amp;) -&gt; detail::params_iter_impl</arglist>
    </member>
    <member kind="function" protection="private">
      <type>system::result&lt; void &gt;</type>
      <name>resolve_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>abb96840837100126fee974b7e04b6f6c</anchor>
      <arglist>(url_view_base const &amp;base, url_view_base const &amp;ref)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>normalize_octets_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a66a041dd584069699256993322d82a2c</anchor>
      <arglist>(int, CharSet const &amp;allowed, op_t &amp;) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>decoded_to_lower_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa36b51bdd9c0efe397e4e24d366dff39</anchor>
      <arglist>(int id) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>to_lower_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a0627d599dd98b76d4cb8309f751a3a7b</anchor>
      <arglist>(int id) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::size_t</type>
      <name>digest</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a6185ed21fd341838ea90d9391a6f4251</anchor>
      <arglist>(std::size_t=0) const noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>segments_compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4214dee20c9c62cbe286b868f1f705a7</anchor>
      <arglist>(segments_encoded_view seg0, segments_encoded_view seg1) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>s_</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ab30db710868a200e9adc60e1ede1457b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>cap_</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a6dbd1a65141115ff15e1ea75110afeaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl</type>
      <name>impl_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a748ab60d0c2c544fdf81b3d81a10c079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl const  *</type>
      <name>pi_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aa41d293a4507db2e988646b208369e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classboost_1_1urls_1_1url.html</anchorfile>
      <anchor>a16cecc63fe7eb1379e5378f9cc9871d0</anchor>
      <arglist>(url &amp;v0, url &amp;v1) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::url_base</name>
    <filename>classboost_1_1urls_1_1url__base.html</filename>
    <base>boost::urls::url_view_base</base>
    <class kind="struct">boost::urls::url_base::op_t</class>
    <member kind="function">
      <type>char const *</type>
      <name>c_str</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa2105bf9d0f0066827f1c13bda84d830</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>capacity</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aac6ef0aec989bc77303b2c0d6dd03c4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ad7ace028a2999faea50baa90b6d29d5f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a370fdf5fc20a09a98492b63018a921d3</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa0939fc6b18e1b5aa44fd59d4aaf5d7e</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_scheme_id</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a63c760a15a6bf9878855118afba81274</anchor>
      <arglist>(scheme id)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a0a66323a16c97faeec51497f420bde14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a6cc3e038d5499ac3b0bc4d04ac399554</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a1ddde16184fed1fd7c6e4f8e5f96a9c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a7c6a3a95ac55debb720459bb61f20572</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>acf965292f0f14788f20a802785f801a5</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a4bb938160aa4078e9b525799e07b8cea</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_user</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>af235ce213a2a5f2583b53e0bccab2d4b</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_user</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ad773af746b7589a9ee22c520062b8bd4</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_password</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a13eb280c6170bf7f40731f9eb93cd767</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_password</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ab545da9e9f3355b4e2fa94c67f704a34</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_password</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a825eca148bad717ead0d80da1cb72947</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aaf05628d3b6a6887558653953765dee9</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_host</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa9f3e4bc9b6073fd21ba98154e94b2be</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a7a0968296545d44002bcecbcf4f53bf1</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a271a24bd13805de80e983b4c2a7ea6f4</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host_ipv4</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a852ca1f6b4ff91b8ba02f8b04cfd4b95</anchor>
      <arglist>(ipv4_address const &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host_ipv6</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a541e42112adabc635936491b738e9679</anchor>
      <arglist>(ipv6_address const &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host_ipvfuture</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aea6bcaa449f77cf4f99b9a6341568393</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ae2972a298c591b0c78a95a46611b1404</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>afaba67fb4ecb28a77a037776040eac3a</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_port_number</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a04b73d68602b56e2829a3fb1cb0fccff</anchor>
      <arglist>(std::uint16_t n)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_port</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac4db7aa88d1ff44341856cf5ec88a4b3</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_port</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a4e484607857ddaad38b86ab91110b97f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_path_absolute</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>af84b9415b211abb24134a52c53271fff</anchor>
      <arglist>(bool absolute)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_path</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a61ceb137803ce84c516352284882e867</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_path</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a47802f22d56833ee9068bb1b69e7bb74</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>urls::segments_ref</type>
      <name>segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a093af27a15153929ceaf5f52cff222e7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_view</type>
      <name>segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ae579e95ac9a84069d6afb800965a79a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_ref</type>
      <name>encoded_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a72d3dc29eb37f6a1275019caab4e710a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_view</type>
      <name>encoded_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a7165388345a6d5839ca2fc235de56a2e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_query</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>afff6c5a124c784624f59525c19c80c20</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_query</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a86492f4399395190119f2f2673156e4b</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>params_ref</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a5a16e1072fcb6007bfaa4ed7d98df73f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a39fbe82213240b6fbb74324702c83c4e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_ref</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a961d8a6a1581e47ead6fffc292a22e5e</anchor>
      <arglist>(encoding_opts opt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_view</type>
      <name>encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac55ddc4d06446506f01f6c509b46edfd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_ref</type>
      <name>encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac096a414c9ab1ebd21de92887ca4d6b5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ab644560a252a8b4a7072f9fa4964d83e</anchor>
      <arglist>(std::initializer_list&lt; param_view &gt; ps) noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a100baca64a8f6957110eb819462ce3de</anchor>
      <arglist>(std::initializer_list&lt; param_pct_view &gt; ps) noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_query</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac73516defdfd8e4940ab1a283a1445be</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a4f4923c76342325bde6fc66174f4b05c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a466ee18c0cabd8a0a7b038591d7231d4</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>set_encoded_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a6427119d6f64ebeacff4d38161d4f12c</anchor>
      <arglist>(pct_string_view s)</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>remove_origin</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>af59fa1734e5071132a1c4a8287cb00ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a9dc84d61b5f11ae0b7900eb61e4eedce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a759bb7c1f145b5d5798248a2b8b9d3a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a62ab3805daab3d43a09a1f0cc6143b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize_path</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a621b7d1c9ea085d32a956802c26d97a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize_query</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a77822aa1f9b24ddeb3ef974c0bebb27f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>url_base &amp;</type>
      <name>normalize_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a978a8644cdedbd9dcbbba90e35695dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; void &gt;</type>
      <name>resolve</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aafc8c3cbca6bb5be8062e431c467ea85</anchor>
      <arglist>(url_view_base const &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a690b5118310ba9f5a576fe9d8e0d9487</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4603dc4e35575375cd03ec06115d8046</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>data</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a2d394d21149903bfeab32ea3668bbbc5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3a8844c63ecdbfd192a5b75edad2a381</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator core::string_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a101a1fe6ed2df11649427f8ad73303ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; url_view const &gt;</type>
      <name>persist</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>acc0099a8df38dc7c07092568a133f35f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae42fe23181ec960d71da4d8c3057fd82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1e48af0c38cc928ec78bd2eee3447768</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::scheme</type>
      <name>scheme_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a831a713313f5d7488e4f798d802e1102</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab457c81aa393f680577ad2dad53d80d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>authority_view</type>
      <name>authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a60a936e492fbfd5e1dabc9e41cfab0bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a043d22df5806b09a3a8c0a422d905e67</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>af4a183bfdf87f740c75c701a33fcb503</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a27123b349b4e1814c7320ce0c7117660</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a7f0e6af4eaeef95e63e00e9e86013105</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a06785caf1695eacecf369e0031734d61</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae14e18264d789e685c7e42b5becf0472</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a9d4bc2fa87a0cc143c193f4cf8c74991</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a41ebf6d946125d92257ece1dd0ac70fe</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abdb64fb7fd3cc750b4afea0cc577c874</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::host_type</type>
      <name>host_type</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a338009fc5b2924a96b801a5c39c686d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abecabf15615632bd87209f43bb018734</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3342beca1f675a83726c0e4674e70f26</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8738f92c1bbec3ab13784b06dc5dcb8c</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a788e1f19125b8a06c801d22cbe1df5c1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv4_address</type>
      <name>host_ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5655e89af7c3e47fe54c513d85a4a73b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv6_address</type>
      <name>host_ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abff163e7ca40c010af98b0d78df2eee7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>host_ipvfuture</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8037fd9b0ba81d87fb325df5c8aa31fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0a1e6638d60033869bcc0cfd4097b7d</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5b2a15ef943000de1d9d4baf794f5a3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a839dbb6fb33ed1f66b6957e4bbe293bd</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0192ef18d4eb78d73030074ee86f340</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace2a7e32badff717808b7b44af777406</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a46df8e86ed148e9a3b9a05ab75add5e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::uint16_t</type>
      <name>port_number</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a44506cc695fcaf287c094fc5c15d891e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_path_absolute</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a14436b6e134d6358b306a9a66a021365</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace04968880dd8dd4a619dd3606e3d4a5</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab8f3137c1b120786f0f41cf96e4c1577</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ad66795fb8c2c78bea2534473068cd313</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab5c33059e900592016c75d73bffdff21</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aacce86344740033d39f007ab08151f59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4cc83d01478dc46b3b296b330ff84b53</anchor>
      <arglist>(encoding_opts opt) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a0a207dc89f5b5567dfc3b7d66857c373</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4be3c1e1d45281beaa7bcf99171142b2</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a18d15d4e236cce8a6160f638590ba985</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_and_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a982fddcae8b052a9994cb367aca4fea7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_origin</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3134dd8bd84f18e51a222d84b21f8e52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_resource</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a337fd7d8a3148a9f5436afe5e705caec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_target</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aee6b90e4050b062ebb70f72fbf2bd3db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1d0d4e9ab6531ae924c59029b020be7a</anchor>
      <arglist>(url_view_base const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae62d979c65c553ece331c753181dc6c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual</type>
      <name>~url_base</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a49ba016986d177e9c440a2b42c9c3dcc</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>url_base</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a6ac7731b9e90a33d586a33c6906a3a17</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>url_base</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa8893aa18716fd77cbba516bcfbb68f4</anchor>
      <arglist>(detail::url_impl const &amp;) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>url_base</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a8035607f883c547addc68d5941e4810e</anchor>
      <arglist>(core::string_view)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reserve_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a6096a8b19a4cfe1f009dc1f1af01056d</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a778a556b6896b021914e1e5d35250354</anchor>
      <arglist>(url_view_base const &amp;)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual void</type>
      <name>clear_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac7ca3ce94802c0994e944f4f846b0d4b</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual void</type>
      <name>reserve_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a4e8cf24eed37a46e0073bb2697fa17a2</anchor>
      <arglist>(std::size_t, op_t &amp;)=0</arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual void</type>
      <name>cleanup</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac875f83f993acc5191a3bfc0f4d873bc</anchor>
      <arglist>(op_t &amp;)=0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check_invariants</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a967b64f15221fb7688ac1356cdf75cf0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>resize_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a05b00520ab18bbc8328292cea79ad4b4</anchor>
      <arglist>(int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>resize_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a5341b2b49b874a43495b5585bf887991</anchor>
      <arglist>(int, int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>shrink_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa9c4f7ad2ae8db5291401e59b35040bc</anchor>
      <arglist>(int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>shrink_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a0a3027484603f895149799f51df5051e</anchor>
      <arglist>(int, int, std::size_t, op_t &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>set_scheme_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a524b1895f59d469048f90108429efe52</anchor>
      <arglist>(core::string_view, urls::scheme)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_user_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>acb42da7fccba899b093ecaaa1e82bc95</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_password_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a68dae3a0010fec7fc2d7faa13f5e0089</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_userinfo_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a238606db497afd9bd0dd2f30a6ba56d2</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_host_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aba38d157e6b179e311c7542714e5ada6</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_port_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a086b0b3086995b33ad1e406547066ae9</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char *</type>
      <name>set_path_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a69c35f86c7e811a60db67adc5ab78af6</anchor>
      <arglist>(std::size_t n, op_t &amp;op)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>core::string_view</type>
      <name>first_segment</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a93d2e3669b9e3971f9a2e1eb53668b3d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>detail::segments_iter_impl</type>
      <name>edit_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac2c71ff54e69e28ec9b4f736e76de376</anchor>
      <arglist>(detail::segments_iter_impl const &amp;, detail::segments_iter_impl const &amp;, detail::any_segments_iter &amp;&amp;it0, int absolute=-1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>auto</type>
      <name>edit_params</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aab5a26a3b42b0e7a4ed9a8bee64ce068</anchor>
      <arglist>(detail::params_iter_impl const &amp;, detail::params_iter_impl const &amp;, detail::any_params_iter &amp;&amp;) -&gt; detail::params_iter_impl</arglist>
    </member>
    <member kind="function" protection="private">
      <type>system::result&lt; void &gt;</type>
      <name>resolve_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>abb96840837100126fee974b7e04b6f6c</anchor>
      <arglist>(url_view_base const &amp;base, url_view_base const &amp;ref)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>normalize_octets_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a66a041dd584069699256993322d82a2c</anchor>
      <arglist>(int, CharSet const &amp;allowed, op_t &amp;) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>decoded_to_lower_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>aa36b51bdd9c0efe397e4e24d366dff39</anchor>
      <arglist>(int id) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>to_lower_impl</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a0627d599dd98b76d4cb8309f751a3a7b</anchor>
      <arglist>(int id) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::size_t</type>
      <name>digest</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a6185ed21fd341838ea90d9391a6f4251</anchor>
      <arglist>(std::size_t=0) const noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>segments_compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4214dee20c9c62cbe286b868f1f705a7</anchor>
      <arglist>(segments_encoded_view seg0, segments_encoded_view seg1) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>s_</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ab30db710868a200e9adc60e1ede1457b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>cap_</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a6dbd1a65141115ff15e1ea75110afeaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl</type>
      <name>impl_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a748ab60d0c2c544fdf81b3d81a10c079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl const  *</type>
      <name>pi_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aa41d293a4507db2e988646b208369e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ac8e4546acf12c4e621b1d729e223cf7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>static_url_base</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a0a191713c4ee8a4ac343425cd18c4fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_ref</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ab4a3e0ddb0ddd0a8f1b869f6c5d5c071</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_ref</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a310ca7cb1df4b135729e7b4994921e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>ad4524f4e268feb41d08e7ad697c69810</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a618f7db49797e8c7fc34eac922854ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>detail::pattern</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>adff1f486a806398b34c260011d7bed6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend system::result&lt; void &gt;</type>
      <name>resolve</name>
      <anchorfile>classboost_1_1urls_1_1url__base.html</anchorfile>
      <anchor>a011d178327efca35a4bed6f0c71a3e26</anchor>
      <arglist>(url_view_base const &amp;base, url_view_base const &amp;ref, url_base &amp;dest)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::url_view</name>
    <filename>classboost_1_1urls_1_1url__view.html</filename>
    <base>boost::urls::url_view_base</base>
    <member kind="function">
      <type></type>
      <name>~url_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>a271702b02919fed4de5cd180abe6f6bf</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>url_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>a97871477ca4b25751323fa83db684f9c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>url_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>ae62437d4cb2e9b6212c0ad27775476d2</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>url_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>ad88f5a0b95525b7d3ba71eb0788071dd</anchor>
      <arglist>(String const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>url_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>aa67ce9fd1e81a182e9ff987cfec66d42</anchor>
      <arglist>(url_view const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>url_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>aa3eca59342c46c0455fa454b790ed0fc</anchor>
      <arglist>(url_view_base const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>a8fe89324a52b4c5590644145035db952</anchor>
      <arglist>(url_view const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>url_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>a761659a2aa1e37f9684c2a2625426be2</anchor>
      <arglist>(url_view_base const &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a690b5118310ba9f5a576fe9d8e0d9487</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4603dc4e35575375cd03ec06115d8046</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>data</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a2d394d21149903bfeab32ea3668bbbc5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3a8844c63ecdbfd192a5b75edad2a381</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator core::string_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a101a1fe6ed2df11649427f8ad73303ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; url_view const &gt;</type>
      <name>persist</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>acc0099a8df38dc7c07092568a133f35f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae42fe23181ec960d71da4d8c3057fd82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1e48af0c38cc928ec78bd2eee3447768</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::scheme</type>
      <name>scheme_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a831a713313f5d7488e4f798d802e1102</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab457c81aa393f680577ad2dad53d80d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>authority_view</type>
      <name>authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a60a936e492fbfd5e1dabc9e41cfab0bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a043d22df5806b09a3a8c0a422d905e67</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>af4a183bfdf87f740c75c701a33fcb503</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a27123b349b4e1814c7320ce0c7117660</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a7f0e6af4eaeef95e63e00e9e86013105</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a06785caf1695eacecf369e0031734d61</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae14e18264d789e685c7e42b5becf0472</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a9d4bc2fa87a0cc143c193f4cf8c74991</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a41ebf6d946125d92257ece1dd0ac70fe</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abdb64fb7fd3cc750b4afea0cc577c874</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::host_type</type>
      <name>host_type</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a338009fc5b2924a96b801a5c39c686d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abecabf15615632bd87209f43bb018734</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3342beca1f675a83726c0e4674e70f26</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8738f92c1bbec3ab13784b06dc5dcb8c</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a788e1f19125b8a06c801d22cbe1df5c1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv4_address</type>
      <name>host_ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5655e89af7c3e47fe54c513d85a4a73b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv6_address</type>
      <name>host_ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abff163e7ca40c010af98b0d78df2eee7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>host_ipvfuture</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8037fd9b0ba81d87fb325df5c8aa31fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0a1e6638d60033869bcc0cfd4097b7d</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5b2a15ef943000de1d9d4baf794f5a3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a839dbb6fb33ed1f66b6957e4bbe293bd</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0192ef18d4eb78d73030074ee86f340</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace2a7e32badff717808b7b44af777406</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a46df8e86ed148e9a3b9a05ab75add5e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::uint16_t</type>
      <name>port_number</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a44506cc695fcaf287c094fc5c15d891e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_path_absolute</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a14436b6e134d6358b306a9a66a021365</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace04968880dd8dd4a619dd3606e3d4a5</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab8f3137c1b120786f0f41cf96e4c1577</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_view</type>
      <name>segments</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a934dc3f16e5526de262ed45d1a344683</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_view</type>
      <name>encoded_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5eb01911ee5617dfe9e7770b1226382f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ad66795fb8c2c78bea2534473068cd313</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab5c33059e900592016c75d73bffdff21</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aacce86344740033d39f007ab08151f59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a2a3205d64546ca300cad9c0ea1c11cc2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4cc83d01478dc46b3b296b330ff84b53</anchor>
      <arglist>(encoding_opts opt) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_view</type>
      <name>encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a709083a844c072b034304a2a3569bf77</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a0a207dc89f5b5567dfc3b7d66857c373</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4be3c1e1d45281beaa7bcf99171142b2</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a18d15d4e236cce8a6160f638590ba985</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_and_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a982fddcae8b052a9994cb367aca4fea7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_origin</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3134dd8bd84f18e51a222d84b21f8e52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_resource</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a337fd7d8a3148a9f5436afe5e705caec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_target</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aee6b90e4050b062ebb70f72fbf2bd3db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1d0d4e9ab6531ae924c59029b020be7a</anchor>
      <arglist>(url_view_base const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>ab80b3257f2eca299e69e06425f1b27f1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>url_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>aeea4420c95143223af79232030611aa9</anchor>
      <arglist>(detail::url_impl const &amp;impl) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::size_t</type>
      <name>digest</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a6185ed21fd341838ea90d9391a6f4251</anchor>
      <arglist>(std::size_t=0) const noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>segments_compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4214dee20c9c62cbe286b868f1f705a7</anchor>
      <arglist>(segments_encoded_view seg0, segments_encoded_view seg1) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl</type>
      <name>impl_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a748ab60d0c2c544fdf81b3d81a10c079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl const  *</type>
      <name>pi_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aa41d293a4507db2e988646b208369e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>af842cffbb9b993e5d05e4bc74d5c2b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>a7e94ecbb88e0ffe4c565cfdf1ec854bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_encoded_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view.html</anchorfile>
      <anchor>ad70aad5af33028efd6dcf985dc006f81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::urls::url_view_base</name>
    <filename>classboost_1_1urls_1_1url__view__base.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a690b5118310ba9f5a576fe9d8e0d9487</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4603dc4e35575375cd03ec06115d8046</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>data</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a2d394d21149903bfeab32ea3668bbbc5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>buffer</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3a8844c63ecdbfd192a5b75edad2a381</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator core::string_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a101a1fe6ed2df11649427f8ad73303ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; url_view const &gt;</type>
      <name>persist</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>acc0099a8df38dc7c07092568a133f35f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae42fe23181ec960d71da4d8c3057fd82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>scheme</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1e48af0c38cc928ec78bd2eee3447768</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::scheme</type>
      <name>scheme_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a831a713313f5d7488e4f798d802e1102</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab457c81aa393f680577ad2dad53d80d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>authority_view</type>
      <name>authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a60a936e492fbfd5e1dabc9e41cfab0bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_authority</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a043d22df5806b09a3a8c0a422d905e67</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>af4a183bfdf87f740c75c701a33fcb503</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a27123b349b4e1814c7320ce0c7117660</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a7f0e6af4eaeef95e63e00e9e86013105</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_userinfo</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a06785caf1695eacecf369e0031734d61</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae14e18264d789e685c7e42b5becf0472</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_user</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a9d4bc2fa87a0cc143c193f4cf8c74991</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a41ebf6d946125d92257ece1dd0ac70fe</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_password</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abdb64fb7fd3cc750b4afea0cc577c874</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>urls::host_type</type>
      <name>host_type</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a338009fc5b2924a96b801a5c39c686d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abecabf15615632bd87209f43bb018734</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3342beca1f675a83726c0e4674e70f26</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8738f92c1bbec3ab13784b06dc5dcb8c</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a788e1f19125b8a06c801d22cbe1df5c1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv4_address</type>
      <name>host_ipv4_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5655e89af7c3e47fe54c513d85a4a73b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ipv6_address</type>
      <name>host_ipv6_address</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abff163e7ca40c010af98b0d78df2eee7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>host_ipvfuture</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a8037fd9b0ba81d87fb325df5c8aa31fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0a1e6638d60033869bcc0cfd4097b7d</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_name</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5b2a15ef943000de1d9d4baf794f5a3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a839dbb6fb33ed1f66b6957e4bbe293bd</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_zone_id</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac0192ef18d4eb78d73030074ee86f340</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace2a7e32badff717808b7b44af777406</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a46df8e86ed148e9a3b9a05ab75add5e8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::uint16_t</type>
      <name>port_number</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a44506cc695fcaf287c094fc5c15d891e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_path_absolute</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a14436b6e134d6358b306a9a66a021365</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ace04968880dd8dd4a619dd3606e3d4a5</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_path</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab8f3137c1b120786f0f41cf96e4c1577</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_view</type>
      <name>segments</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a934dc3f16e5526de262ed45d1a344683</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>segments_encoded_view</type>
      <name>encoded_segments</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5eb01911ee5617dfe9e7770b1226382f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ad66795fb8c2c78bea2534473068cd313</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab5c33059e900592016c75d73bffdff21</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_query</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aacce86344740033d39f007ab08151f59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a2a3205d64546ca300cad9c0ea1c11cc2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_view</type>
      <name>params</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4cc83d01478dc46b3b296b330ff84b53</anchor>
      <arglist>(encoding_opts opt) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>params_encoded_view</type>
      <name>encoded_params</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a709083a844c072b034304a2a3569bf77</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a0a207dc89f5b5567dfc3b7d66857c373</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4be3c1e1d45281beaa7bcf99171142b2</anchor>
      <arglist>(StringToken &amp;&amp;token={}) const</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_fragment</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a18d15d4e236cce8a6160f638590ba985</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_host_and_port</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a982fddcae8b052a9994cb367aca4fea7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_origin</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a3134dd8bd84f18e51a222d84b21f8e52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_resource</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a337fd7d8a3148a9f5436afe5e705caec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pct_string_view</type>
      <name>encoded_target</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aee6b90e4050b062ebb70f72fbf2bd3db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1d0d4e9ab6531ae924c59029b020be7a</anchor>
      <arglist>(url_view_base const &amp;other) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>max_size</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ae62d979c65c553ece331c753181dc6c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a588a854d365e1ca27231e9369c3ffeac</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab2a98435d4a7b12c11f32008f001b7b8</anchor>
      <arglist>(detail::url_impl const &amp;) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>~url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a5ccd8c99ace001825230ad6eec942707</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>url_view_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a449fb5d4487c8bb0c8ace0b31f0f4cf5</anchor>
      <arglist>(url_view_base const &amp;o) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>url_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4cc3893f5ae7a82e08e4d2b91a675e36</anchor>
      <arglist>(url_view_base const &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::size_t</type>
      <name>digest</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a6185ed21fd341838ea90d9391a6f4251</anchor>
      <arglist>(std::size_t=0) const noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>segments_compare</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4214dee20c9c62cbe286b868f1f705a7</anchor>
      <arglist>(segments_encoded_view seg0, segments_encoded_view seg1) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl</type>
      <name>impl_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a748ab60d0c2c544fdf81b3d81a10c079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>detail::url_impl const  *</type>
      <name>pi_</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aa41d293a4507db2e988646b208369e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ac8e4546acf12c4e621b1d729e223cf7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a98a5397aa18694cf4eb1ee15cc077242</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>url_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aaecf50f08b6beec334458127719088c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>static_url_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a0a191713c4ee8a4ac343425cd18c4fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a7e94ecbb88e0ffe4c565cfdf1ec854bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_encoded_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ad70aad5af33028efd6dcf985dc006f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a618f7db49797e8c7fc34eac922854ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a83713cc0e60bcc8cbf4a936f26118d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_ref</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ab4a3e0ddb0ddd0a8f1b869f6c5d5c071</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>params_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a92b6a5fd1004d2849e6e1b87a18b09ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ad48767768d8da15cb17f6e2f7bded6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_encoded_base</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>adae2494ed465a352cdf475abef762886</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_encoded_ref</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>ad4524f4e268feb41d08e7ad697c69810</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_encoded_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>abd6a24997403427cb6240f18b50b33d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_ref</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a310ca7cb1df4b135729e7b4994921e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>segments_view</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a73b05720eb367b85a0a13726205d1043</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>detail::pattern</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>adff1f486a806398b34c260011d7bed6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a1272fa42d0cd17e1ee74c9e8d18aaff3</anchor>
      <arglist>(url_view_base const &amp;u0, url_view_base const &amp;u1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a4332363b0faea95f1c40615acac66739</anchor>
      <arglist>(url_view_base const &amp;u0, url_view_base const &amp;u1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a6390f03a9e901f6d550245c227e26f82</anchor>
      <arglist>(url_view_base const &amp;u0, url_view_base const &amp;u1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a56096171ad3febf5a69e60452fa8b2a3</anchor>
      <arglist>(url_view_base const &amp;u0, url_view_base const &amp;u1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a670f0e6aa09dfd743cab4799f07662b3</anchor>
      <arglist>(url_view_base const &amp;u0, url_view_base const &amp;u1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>a9193770450c05978be9b6e894cb2908f</anchor>
      <arglist>(url_view_base const &amp;u0, url_view_base const &amp;u1) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classboost_1_1urls_1_1url__view__base.html</anchorfile>
      <anchor>aab701e2907eb13282667a28ad2a42857</anchor>
      <arglist>(std::ostream &amp;os, url_view_base const &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>boost</name>
    <filename>namespaceboost.html</filename>
    <namespace>boost::urls</namespace>
  </compound>
  <compound kind="namespace">
    <name>boost::urls</name>
    <filename>namespaceboost_1_1urls.html</filename>
    <namespace>boost::urls::grammar</namespace>
    <namespace>boost::urls::string_token</namespace>
    <class kind="class">boost::urls::authority_view</class>
    <class kind="class">boost::urls::decode_view</class>
    <class kind="struct">boost::urls::encoding_opts</class>
    <class kind="class">boost::urls::ignore_case_param</class>
    <class kind="class">boost::urls::ipv4_address</class>
    <class kind="class">boost::urls::ipv6_address</class>
    <class kind="struct">boost::urls::no_value_t</class>
    <class kind="struct">boost::urls::param</class>
    <class kind="struct">boost::urls::param_pct_view</class>
    <class kind="struct">boost::urls::param_view</class>
    <class kind="class">boost::urls::params_base</class>
    <class kind="class">boost::urls::params_encoded_base</class>
    <class kind="class">boost::urls::params_encoded_ref</class>
    <class kind="class">boost::urls::params_encoded_view</class>
    <class kind="class">boost::urls::params_ref</class>
    <class kind="class">boost::urls::params_view</class>
    <class kind="class">boost::urls::pct_string_view</class>
    <class kind="class">boost::urls::segments_base</class>
    <class kind="class">boost::urls::segments_encoded_base</class>
    <class kind="class">boost::urls::segments_encoded_ref</class>
    <class kind="class">boost::urls::segments_encoded_view</class>
    <class kind="class">boost::urls::segments_ref</class>
    <class kind="class">boost::urls::segments_view</class>
    <class kind="class">boost::urls::static_url</class>
    <class kind="class">boost::urls::static_url_base</class>
    <class kind="class">boost::urls::url</class>
    <class kind="class">boost::urls::url_base</class>
    <class kind="class">boost::urls::url_view</class>
    <class kind="class">boost::urls::url_view_base</class>
    <member kind="typedef">
      <type>boost::variant2::variant&lt; Ts... &gt;</type>
      <name>variant</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a73b69863b1435ad7d76426aa4f23a9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::core::string_view</type>
      <name>string_view</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>aeb96ef3fbcf0993439f9b39b2b428e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a9051e7a77e7df3fc76ece3e2ce0e6c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::system::error_category</type>
      <name>error_category</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a156d721e5fbc3292872bbf1b7d76f025</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::system::error_code</type>
      <name>error_code</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a4b6307011e35aaace57eb462e78781ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::system::error_condition</type>
      <name>error_condition</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a842a4ad9890dfcc9549d7f65ca856c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::system::system_error</type>
      <name>system_error</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>aa209689d69db79c6c62db45717f92ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::system::result&lt; T, system::error_code &gt;</type>
      <name>result</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>acb8818555fc0bf76faca399298b34b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>scheme</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a4ca3fa19863daaeab9bd2704c96aa219</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a4ca3fa19863daaeab9bd2704c96aa219a334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a4ca3fa19863daaeab9bd2704c96aa219aad921d60486366258809553a3db49a4a">unknown</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a4ca3fa19863daaeab9bd2704c96aa219aff104b2dfab9fe8c0676587292a636d3">ftp</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a4ca3fa19863daaeab9bd2704c96aa219a8c7dd922ad47494fc02c388e12c00eac">file</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a4ca3fa19863daaeab9bd2704c96aa219a80791b3ae7002cb88c246876d9faa8f8">http</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a4ca3fa19863daaeab9bd2704c96aa219a5e056c500a1c4b6a7110b50d807bade5">https</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a4ca3fa19863daaeab9bd2704c96aa219a742523daef59db4b718409f46de05d0c">ws</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a4ca3fa19863daaeab9bd2704c96aa219aebc308f979e135f40483eec4b35feea1">wss</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>host_type</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>af468ae47c2c7d621927ab6cd5fcbdd30</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="af468ae47c2c7d621927ab6cd5fcbdd30a334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="af468ae47c2c7d621927ab6cd5fcbdd30ab068931cc450442b63f5b3d276ea4297">name</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="af468ae47c2c7d621927ab6cd5fcbdd30a0485728ba5ed6951c7e858af6c1af7c3">ipv4</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="af468ae47c2c7d621927ab6cd5fcbdd30acc314cbc6ae71c0724390eb450bb969d">ipv6</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="af468ae47c2c7d621927ab6cd5fcbdd30a66d39541c16787c31053e0beb7deb541">ipvfuture</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>errc</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a3ffb65eb01fb393052c286657a022e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>__see_below__</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a3ffb65eb01fb393052c286657a022e95af5f4036cf52d0c197da6f687a1f52613</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>error</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a7dbda94509c74fcebb64e6ae8e9e6a12</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a7dbda94509c74fcebb64e6ae8e9e6a12a260ca9dd8a4577fc00b7bd5810298076">success</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a7dbda94509c74fcebb64e6ae8e9e6a12a8d9b06bcb16e06d4f8b4a8a639361aa9">illegal_null</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a7dbda94509c74fcebb64e6ae8e9e6a12a010fc946a23665b840180f75778d1480">illegal_reserved_char</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a7dbda94509c74fcebb64e6ae8e9e6a12a39f5fe7a168fb5d4d3afa3bd967faf69">non_canonical</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a7dbda94509c74fcebb64e6ae8e9e6a12aafbd71cce2edafc432e86a449e0d5216">bad_pct_hexdig</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a7dbda94509c74fcebb64e6ae8e9e6a12a534357053d93a9911a28e305a45227c8">incomplete_encoding</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a7dbda94509c74fcebb64e6ae8e9e6a12a87d6efb21538bebec0aab9f6c7c33eb2">missing_pct_hexdig</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a7dbda94509c74fcebb64e6ae8e9e6a12ad8f72b79073bff1b3588e5c9e078aae7">no_space</enumvalue>
      <enumvalue file="namespaceboost_1_1urls.html" anchor="a7dbda94509c74fcebb64e6ae8e9e6a12a90f3b91c6ffd02db0f9b069090af405e">not_a_base</enumvalue>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>aab4ba7204480ada6e8ce0b305fd0b335</anchor>
      <arglist>(std::ostream &amp;os, url_view_base const &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; void &gt;</type>
      <name>resolve</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a20ba8308285263cff7748aefc773f07a</anchor>
      <arglist>(url_view_base const &amp;base, url_view_base const &amp;ref, url_base &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a212b8864f3afc14a0a6f0242618390d9</anchor>
      <arglist>(std::ostream &amp;os, segments_encoded_base const &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>aa5657fa29c904e969ef9e1eefe1696c9</anchor>
      <arglist>(std::ostream &amp;os, segments_base const &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>scheme</type>
      <name>string_to_scheme</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>ad8b6d2099b9d8b22e3a6b104d6bcb727</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>core::string_view</type>
      <name>to_string</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a1b217500a569c7acb7466402ea4052e5</anchor>
      <arglist>(scheme s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::uint16_t</type>
      <name>default_port</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a023b58388953dc3bb08ab83be8595c6f</anchor>
      <arglist>(scheme s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; pct_string_view &gt;</type>
      <name>make_pct_string_view</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a3f01cb6fb56d42248bcb33c9ecb815a8</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; params_encoded_view &gt;</type>
      <name>parse_query</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>af405dc2b46965aa137dfbfe07061d6b4</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; segments_encoded_view &gt;</type>
      <name>parse_path</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>aec84ffe359fb4a94b0f94288d2863a5c</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; url_view &gt;</type>
      <name>parse_absolute_uri</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a418d9d9763cdf72f0b68a7e36c44672a</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; url_view &gt;</type>
      <name>parse_origin_form</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>aec9412730fbfe933d76318e0d71279c5</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; url_view &gt;</type>
      <name>parse_relative_ref</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a8d01007c94624ae348bb43e466c9df7e</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; url_view &gt;</type>
      <name>parse_uri</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a3bc974ded9879a30eac83fac5b832623</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; url_view &gt;</type>
      <name>parse_uri_reference</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a6f40c21742266a16df0097252acd9438</anchor>
      <arglist>(core::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a3bbf7d28310c2951c2b66f3e4e476760</anchor>
      <arglist>(std::ostream &amp;os, params_encoded_base const &amp;qp)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>af3ca992e701fc9d7643774a7782abb81</anchor>
      <arglist>(std::ostream &amp;os, params_base const &amp;qp)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a5ed2fb82f124f7650937f9d06e38df79</anchor>
      <arglist>(std::ostream &amp;os, ipv6_address const &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; ipv6_address &gt;</type>
      <name>parse_ipv6_address</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a8a88c3be97b828478c46af4632134216</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a1c43cc52cb286bf9c8335bc0eb6e5ac0</anchor>
      <arglist>(std::ostream &amp;os, ipv4_address const &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; ipv4_address &gt;</type>
      <name>parse_ipv4_address</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>af69d9f3268fb3eae244493e10cbf7814</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>url</type>
      <name>format</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>ab2d5d8e32bc67cec4bce524392a5e089</anchor>
      <arglist>(core::string_view fmt, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>format_to</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a002ba2aedfc4ae3dbc5ebfc102ce3e03</anchor>
      <arglist>(url_base &amp;u, core::string_view fmt, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>url</type>
      <name>format</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a4effc59ec090dc387a695931dfb7fe8b</anchor>
      <arglist>(core::string_view fmt, std::initializer_list&lt; __see_below__ &gt; args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>format_to</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a29231e1130d2be739d550b571f0130bd</anchor>
      <arglist>(url_base &amp;u, core::string_view fmt, std::initializer_list&lt; __see_below__ &gt; args)</arglist>
    </member>
    <member kind="function">
      <type>__implementation_defined__</type>
      <name>arg</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a21446961d7ef5c88ba480ec8d095d3f2</anchor>
      <arglist>(core::string_view name, T const &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>error_category const &amp;</type>
      <name>generic_category</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>abae1fe4b501347d9e37ab90a5a1e1d3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>error_category const &amp;</type>
      <name>system_category</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>ac69a4e329716637dc1646b8479bd839f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>encoded_size</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a3db6ef9f84df2823f2628ea14063c0b9</anchor>
      <arglist>(core::string_view s, CharSet const &amp;unreserved, encoding_opts opt={}) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>encode</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>af449ae07c794bc0efea9c5b2378eb57c</anchor>
      <arglist>(char *dest, std::size_t size, core::string_view s, CharSet const &amp;unreserved, encoding_opts opt={})</arglist>
    </member>
    <member kind="function">
      <type>StringToken::result_type</type>
      <name>encode</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a2e7901fb34dc90e6083a0dc8677d454c</anchor>
      <arglist>(core::string_view s, CharSet const &amp;unreserved, encoding_opts opt={}, StringToken &amp;&amp;token={}) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>afbe4e019a8f70124a3b74bb9344e1e8c</anchor>
      <arglist>(std::ostream &amp;os, decode_view const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>aa0989b4a9be6e03a46cb0e5bf02fcb55</anchor>
      <arglist>(std::ostream &amp;os, authority_view const &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; authority_view &gt;</type>
      <name>parse_authority</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a668da47b5326b213bcc77be735e3faf7</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>pct_encoded_rule</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a411ee6fbf6b67e6770d72b14a2c0bf53</anchor>
      <arglist>(CharSet const &amp;cs) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr no_value_t</type>
      <name>no_value</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a5d9f9112bb9b5b30d1de9e94c30c7f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>ignore_case</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a2b250a21213a1a705008037498473dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>uri_rule</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>aaed6b9da27c326607f0c3e53234813c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>uri_reference_rule</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>ad917c888d91ffa89c569fb00222604f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr grammar::lut_chars</type>
      <name>unreserved_chars</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a2f34d85c5d24b6a8e60df8841be981da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr grammar::lut_chars</type>
      <name>sub_delim_chars</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a2760d2ce6e54b9e1764b68f3c366ea09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>reserved_chars</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a6cb8d0107b5628d799bab25530a05096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>relative_ref_rule</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a52c2aab55aa97610719227dc496eb25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>query_rule</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a98edee6c21bb3706814841f5c7699683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>pchars</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>ab3dc1bdd3780be8bf41a28be5a16b40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>origin_form_rule</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>ac161e34cbfc53251196d4bb9edd7a9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>ipv6_address_rule</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a00c43b9ad14626947ee9be6f12ba3c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>ipv4_address_rule</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>ab213b3f9b83426244656b71365974b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr grammar::lut_chars</type>
      <name>gen_delim_chars</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a7e7c936813ca4c8e41b47763198b07ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>authority_rule</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a816b9301c37273115bd58a86bc0b08ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>absolute_uri_rule</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>acd5d3faac91dd44597ef123cb6833a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>pct_encoded_rule</name>
      <anchorfile>namespaceboost_1_1urls.html</anchorfile>
      <anchor>a411ee6fbf6b67e6770d72b14a2c0bf53</anchor>
      <arglist>(CharSet const &amp;cs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>boost::urls::grammar</name>
    <filename>namespaceboost_1_1urls_1_1grammar.html</filename>
    <class kind="struct">boost::urls::grammar::aligned_storage</class>
    <class kind="class">boost::urls::grammar::lut_chars</class>
    <class kind="class">boost::urls::grammar::range</class>
    <class kind="class">boost::urls::grammar::recycled</class>
    <class kind="class">boost::urls::grammar::recycled_ptr</class>
    <class kind="class">boost::urls::grammar::string_view_base</class>
    <class kind="struct">boost::urls::grammar::unsigned_rule</class>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>is_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a7e9d6cfe69c78662ff854bbaf1a3023f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>ci_hash</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>adf0a4b89475085491cbbf25343b01f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>ci_equal</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>acbb743c22348279c1e3c892f03072764</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>ci_less</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a640649ddd4c1c112779ccc66116df93e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>is_charset</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a3f1c132b4bb7f3936426d6fffa0eaa04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>error</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a21a99d2bd2b69b2de3b0455fdfc8fc1a</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceboost_1_1urls_1_1grammar.html" anchor="a21a99d2bd2b69b2de3b0455fdfc8fc1aa8b2ea992f8090045f758ff8e48d6b30f">need_more</enumvalue>
      <enumvalue file="namespaceboost_1_1urls_1_1grammar.html" anchor="a21a99d2bd2b69b2de3b0455fdfc8fc1aa1d1c5b76da944b44db42c9d0558021c5">mismatch</enumvalue>
      <enumvalue file="namespaceboost_1_1urls_1_1grammar.html" anchor="a21a99d2bd2b69b2de3b0455fdfc8fc1aa3cfd513a4d103e2f61acc6c398f37dff">end_of_range</enumvalue>
      <enumvalue file="namespaceboost_1_1urls_1_1grammar.html" anchor="a21a99d2bd2b69b2de3b0455fdfc8fc1aae5a2a80c4713c9ce780e2cba57bf5e4f">leftover</enumvalue>
      <enumvalue file="namespaceboost_1_1urls_1_1grammar.html" anchor="a21a99d2bd2b69b2de3b0455fdfc8fc1aafedb2d84cafe20862cb4399751a8a7e3">invalid</enumvalue>
      <enumvalue file="namespaceboost_1_1urls_1_1grammar.html" anchor="a21a99d2bd2b69b2de3b0455fdfc8fc1aa4fb901c70a0fdc05b55d95985f3300b0">out_of_range</enumvalue>
      <enumvalue file="namespaceboost_1_1urls_1_1grammar.html" anchor="a21a99d2bd2b69b2de3b0455fdfc8fc1aa55152fd428afc5d73e8878d27d0b09c3">syntax</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>condition</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a8b405e528d3b2d45a11782ee3cd34258</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceboost_1_1urls_1_1grammar.html" anchor="a8b405e528d3b2d45a11782ee3cd34258adf6402fd9ecc60f5a2159fdf45711cd4">fatal</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>variant_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a4b33f0c97d3c165c09e9e80ed1415e8b</anchor>
      <arglist>(Rules... rn) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>tuple_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>aed8dbe168e30a621a9f0b9eb960cafa4</anchor>
      <arglist>(Rules... rn) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>squelch</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a51c9609286d2fd2ae86aedf9263edf19</anchor>
      <arglist>(Rule const &amp;r) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>token_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a09bf736f27b645fa60687e62f11aa9f4</anchor>
      <arglist>(CharSet cs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a875554cd2fc8e1051b5cca296ded98fe</anchor>
      <arglist>(std::ostream &amp;os, string_view_base const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>range_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>ac2e05ed2053be6ad8d5be51e976a6b83</anchor>
      <arglist>(Rule next, std::size_t N=0, std::size_t M=std::size_t(-1)) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>range_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>ac633f81404f8c55659a769b66cf65646</anchor>
      <arglist>(Rule1 first, Rule2 next, std::size_t N=0, std::size_t M=std::size_t(-1)) noexcept</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; typename Rule::value_type &gt;</type>
      <name>parse</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a723a6fb35181ae4915e647a3ace758f8</anchor>
      <arglist>(char const *&amp;it, char const *end, Rule const &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>system::result&lt; typename Rule::value_type &gt;</type>
      <name>parse</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a63213be0ae1aa83fa8a0978dd13192b9</anchor>
      <arglist>(core::string_view s, Rule const &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>ref</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a6b01f712867f79e59f59f82920b498fb</anchor>
      <arglist>(Rule const &amp;r) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>optional_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>af31c6c5ea457dde349b5d4878d38d0c7</anchor>
      <arglist>(Rule r) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>not_empty_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a5ceb3b0d79d727d081cb1d51a51fe3fb</anchor>
      <arglist>(Rule r)</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>literal_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>ae74c6dd928b7ed5fdd91d5877f3d3f63</anchor>
      <arglist>(char const *s)</arglist>
    </member>
    <member kind="function">
      <type>signed char</type>
      <name>hexdig_value</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>aeaaa29fd406a870e6c5474d007adaaaf</anchor>
      <arglist>(char ch) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>delim_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a553126840e7b59d95728ded7acdd8c62</anchor>
      <arglist>(char ch) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>delim_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>ae1ec11900ccc66a0af0d36115449fa85</anchor>
      <arglist>(CharSet const &amp;cs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr char</type>
      <name>to_lower</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>ac59a58d7ceeea8d4f8fb0dc202f4ed3f</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr char</type>
      <name>to_upper</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a1faab9956c15e6bf527fd1017d64a39d</anchor>
      <arglist>(char c) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ci_compare</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>ab90ffb7f88c75808661de5aab1bde464</anchor>
      <arglist>(core::string_view s0, core::string_view s1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>ci_digest</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>aba84df6845747dc4aef672d33afd0dd6</anchor>
      <arglist>(core::string_view s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ci_is_equal</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a90795214e06592cc164a93be128403a3</anchor>
      <arglist>(String0 const &amp;s0, String1 const &amp;s1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ci_is_less</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a08dbace309772c846f866675fc2ab9bc</anchor>
      <arglist>(core::string_view s0, core::string_view s1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>find_if</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a83ee7423731d6161eae3420b1c966dda</anchor>
      <arglist>(char const *const first, char const *const last, CharSet const &amp;cs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>find_if_not</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>adc64834ec4c6a60c94c0614961e90e36</anchor>
      <arglist>(char const *const first, char const *const last, CharSet const &amp;cs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr __implementation_defined__</type>
      <name>ref</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>adddc44214c907d44afdf252f562fd8cb</anchor>
      <arglist>(CharSet const &amp;cs) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>vchars</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>ac437e0f73b65d9fd987005b20f790168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>hexdig_chars</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>afe0b04a24475507aaff5e4586ff19f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>digit_chars</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a61d5997fc23a5bb7f3fa1349f96381ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>dec_octet_rule</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>abc2809451084690a0ed526d8960adbbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>alpha_chars</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>a95b0dbd2d3a18232fd635c2172c96fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>alnum_chars</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>aade21fb91c0af86d26b580b0a2b46039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr __implementation_defined__</type>
      <name>all_chars</name>
      <anchorfile>namespaceboost_1_1urls_1_1grammar.html</anchorfile>
      <anchor>afca2356fa42240c4b004cc81817315de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>boost::urls::string_token</name>
    <filename>namespaceboost_1_1urls_1_1string__token.html</filename>
    <class kind="struct">boost::urls::string_token::arg</class>
    <member kind="typedef">
      <type>__see_below__</type>
      <name>is_token</name>
      <anchorfile>namespaceboost_1_1urls_1_1string__token.html</anchorfile>
      <anchor>a6e7962b7e7dcdb0396129a0bfdd547b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>__implementation_defined__</type>
      <name>return_string</name>
      <anchorfile>namespaceboost_1_1urls_1_1string__token.html</anchorfile>
      <anchor>a541e356cb80b8b5898eacee1c9cf1eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>__implementation_defined__</type>
      <name>append_to</name>
      <anchorfile>namespaceboost_1_1urls_1_1string__token.html</anchorfile>
      <anchor>a9e9100c4afe1ebd57298238f076e4543</anchor>
      <arglist>(std::basic_string&lt; char, std::char_traits&lt; char &gt;, Allocator &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>__implementation_defined__</type>
      <name>assign_to</name>
      <anchorfile>namespaceboost_1_1urls_1_1string__token.html</anchorfile>
      <anchor>aec42601063291d36ec1ca341381ac3df</anchor>
      <arglist>(std::basic_string&lt; char, std::char_traits&lt; char &gt;, Allocator &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>__implementation_defined__</type>
      <name>preserve_size</name>
      <anchorfile>namespaceboost_1_1urls_1_1string__token.html</anchorfile>
      <anchor>a8bf3e4a32fbc9bc109f999a859dd3cb6</anchor>
      <arglist>(std::basic_string&lt; char, std::char_traits&lt; char &gt;, Allocator &gt; &amp;s)</arglist>
    </member>
  </compound>
</tagfile>
