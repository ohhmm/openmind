include(gitect)
if(EXISTS ${GIT_EXECUTABLE})
    execute_process(COMMAND ${GIT_EXECUTABLE} config --get user.email
        OUTPUT_VARIABLE CPACK_PACKAGE_CONTACT)
endif()

macro(pkgwith)
    string(STRIP "${ARGN}" pakageManager)
    string(TOUPPER ${pakageManager} pkgmgr)
    if(pkgmgr)
        find_program(${pkgmgr}_EXECUTABLE ${pkgmgr})
        if(EXISTS ${${pkgmgr}_EXECUTABLE})
            set(${pkgmgr}_FOUND ON)
        else()
            set(${pkgmgr}_FOUND OFF)
        endif()
        option(CPACK_BINARY_${pkgmgr} "${pkgmgr} binary package" ${${pkgmgr}_FOUND})
		set(CPACK_${pkgmgr}_COMPRESSION_TYPE lzma CACHE STRING "${pkgmgr} Compression type")
    endif()
endmacro()

if(OPENMIND_USE_CPACK)
	include(CPack)
	set(CPACK_PACKAGE_NAME ${PRODUCT_NAME} CACHE STRING "Binaries bundle name")
	set(CPACK_BUNDLE_NAME ${PRODUCT_NAME} CACHE STRING "Binaries bundle name")
	if(EXISTS ${CMAKE_SOURCE_DIR}/LICENSE)
		set(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_SOURCE_DIR}/LICENSE CACHE PATH "License file path")
	endif()
	if(APPLE)
		option(CPACK_BINARY_BUNDLE "Build macOS bundle" ON)
	elseif(WIN32)
		find_package(NSIS)
		find_package(WIX)
		option(CPACK_BINARY_WIX "Build installer with WIX toolset" ${WIX_FOUND})
	endif()
	if(NOT NSIS_FOUND)
		find_program(MAKENSIS_EXECUTABLE makensis
			HINTS "$ENV{ProgramFiles}/NSIS" "$ENV{ProgramFiles\(x86\)}/NSIS"
			)
		if(EXISTS ${MAKENSIS_EXECUTABLE})
			set(NSIS_FOUND ON)
		endif()
	endif()
	option(CPACK_BINARY_NSIS "Build installer with NSIS toolset" ${NSIS_FOUND})
	if(CPACK_BINARY_NSIS)
		set(CPACK_NSIS_MODIFY_PATH ON CACHE BOOL "Enable Wizard pages for specifying path for installation")
		set(CPACK_NSIS_DISPLAY_NAME ${PRODUCT_NAME} CACHE STRING "name")
		set(CPACK_NSIS_PACKAGE_NAME ${PRODUCT_NAME} CACHE STRING "name")
	endif()
	pkgwith(rpm)
    pkgwith(deb)
	option(CPACK_SOURCE_RPM "Sources" OFF)
	option(CPACK_SOURCE_TBZ2 "Sources" OFF)
	option(CPACK_SOURCE_TGZ "Sources" OFF)
	option(CPACK_SOURCE_TXZ "Sources" OFF)
	option(CPACK_SOURCE_TZ "Sources" OFF)
	option(CPACK_SOURCE_ZIP "Sources" OFF)
	option(CPACK_BINARY_TZ "Binaries in archive" OFF)
	option(CPACK_BINARY_TGZ "Binaries in archive" OFF)
	option(CPACK_BINARY_STGZ "Binaries in archive" OFF)
endif()
