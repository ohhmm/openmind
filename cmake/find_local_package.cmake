
macro(find_pkg)
	set(hint_paths
		"${CMAKE_BINARY_DIR}"
		"${CMAKE_INSTALL_PREFIX}"
		)
	foreach(dep ${ARGN})
		if(${dep}_FOUND)
			break()
		endif()
		set(hints ${hint_paths})
		if(WIN32)
			if(EXISTS "C:/${dep}")
				set(hints ${hint_paths} "C:/${dep}")
			endif()
			if(EXISTS "C:/${dep}${address_model}")
				set(hints ${hint_paths} "C:/${dep}${address_model}")
			endif()
			if(EXISTS "$ENV{ProgramFiles}/${dep}")
				set(hints ${hint_paths} "$ENV{ProgramFiles}/${dep}")
			endif()
		else()
			if(EXISTS /opt/${dep})
				set(hints ${hint_paths} "/opt/${dep}")
			endif()
		endif()
		find_package(${dep}
			HINTS ${hints}
			)
		message("${dep}_FOUND:${${dep}_FOUND} with HINTS ${hints}")
		if(${dep}_FOUND)
			break()
		endif()
	endforeach()
endmacro()

macro(find_local_dep)
	message("find local dep: ${ARGN}")
	if(${ARGN} MATCHES " ")
		string(REPLACE " " ";" ARGN ${ARGN})
	endif()
	foreach(dep ${ARGN})
		set(libless "")
		if(dep MATCHES "^[Ll][Ii][Bb]")
			STRING(REGEX REPLACE "^[Ll][Ii][Bb]" "" libless ${dep})
			if(NOT ${dep}_FOUND AND NOT ${libless}_FOUND)
				set(hints ${hint_paths})
				if(WIN32)
					set(hints ${hint_paths} "C:/${libless}")
				endif()
				find_pkg(${libless})
				message("${libless}_FOUND: ${${libless}_FOUND}")
			endif()
		endif()
		if(NOT ${dep}_FOUND AND NOT ${libless}_FOUND)
			find_pkg(${dep} lib${dep})
			message("${dep}_FOUND: ${${dep}_FOUND}")
			if(NOT ${dep}_FOUND)
				message("lib${dep}_FOUND: ${lib${dep}_FOUND}")
			endif()
		endif()
	endforeach()
endmacro()

macro(dep_find_package)
	message("dep_find_package: searching for ${dep}")
	find_local_dep(${dep})
	if(NOT ${dep}_FOUND)
		string(REPLACE "-" "" dashless ${dep})
		string(REPLACE "-" "_" underscored ${dep})
		string(TOLOWER ${underscored} underscored_down)
		string(TOUPPER ${underscored} underscored_up)
		STRING(REGEX REPLACE "^LIB" "" libless_up ${underscored_up})
		STRING(REGEX REPLACE "^lib" "" libless_down ${underscored_down})
		if(NOT dashless STREQUAL dep)
			find_local_dep(${dashless})
			if(NOT ${dashless}_FOUND
				AND NOT dashless STREQUAL underscored
				)
				find_local_dep(${underscored})
				if(NOT ${underscored}_FOUND
					AND NOT underscored_down STREQUAL underscored
					)
					find_local_dep(${underscored_down})
					if(NOT ${underscored_down}_FOUND
						AND NOT dashless STREQUAL underscored_up
						)
						find_local_dep(${underscored_up})
						if(NOT ${underscored_up}_FOUND
							AND underscored_down MATCHES "^lib"
							)
							message("libless_up: ${libless_up}")
							find_local_dep(${libless_up})
							message("libless_up: ${libless_up}_FOUND: ${${libless_up}_FOUND}")
							if(NOT ${libless_up}_FOUND)
								message("libless_down: ${libless_down}")
								find_local_dep(${libless_down})
								message("libless_down: ${libless_down}_FOUND: ${${libless_down}_FOUND}")
							endif()
						endif()
					endif()
				endif()
			endif()
		endif()

		if(${dashless}_FOUND)
			message("dashless: ${dashless}_FOUND: ${${dashless}_FOUND}")
			set(dep ${dashless})
		elseif(${underscored}_FOUND)
			message("underscored: ${underscored}_FOUND: ${${underscored}_FOUND}")
			set(dep ${underscored})
		elseif(${underscored_up}_FOUND)
			message("underscored_up: ${underscored_up}_FOUND: ${${underscored_up}_FOUND}")
			set(dep ${underscored_up})
		elseif(${underscored_down}_FOUND)
			message("underscored_down: ${underscored_down}_FOUND: ${${underscored_down}_FOUND}")
			set(dep ${underscored_down})
		elseif(${libless_up}_FOUND)
			message("libless_up: ${libless_up}_FOUND: ${${libless_up}_FOUND}")
			set(dep ${libless_up})
		elseif(${libless_down}_FOUND)
			message("libless_down: ${libless_down}_FOUND: ${${libless_down}_FOUND}")
			set(dep ${libless_down})
		elseif(OPENMIND_USE_PKG_CONFIG_DEPS)
			message(STATUS "PKG_CONFIG_SYSROOT_DIR: $ENV{PKG_CONFIG_SYSROOT_DIR}")
			message(STATUS "PKG_CONFIG_PATH: $ENV{PKG_CONFIG_PATH}")
            message("pkg_check_modules(${underscored_down} IMPORTED_TARGET ${underscored_down}>=1.0)")
            pkg_check_modules(PKG IMPORTED_TARGET ${underscored_down}>=1.0)
			#message("pkg_search_module(${underscored_up} IMPORTED_TARGET ${underscored_down}>=1.0)")
			#pkg_search_module(${underscored_up} REQUIRED "${underscored_down}")
			message("PKG_FOUND: ${PKG_FOUND}")
			if(PKG_FOUND)
				message("PKG_CFLAGS: ${PKG_CFLAGS}")
				message("PKG_LIBRARIES: ${PKG_LIBRARIES}")
				pkg_check_modules(${underscored_down} IMPORTED_TARGET ${underscored_down}>=1.0)
				target_link_libraries(${this_target} PUBLIC PkgConfig::${underscored_down})
			else()
				message("Neither find_package nor pkg_config found ${dep}")
			endif()
			
		endif()
	endif()

	if(${dep}_FOUND)
		message("dep: ${dep}_FOUND: ${${dep}_FOUND}")
		message("dep: ${dep}_INCLUDE_DIR: ${${dep}_INCLUDE_DIR}")
		message("dep: ${dep}_INCLUDE_DIRS: ${${dep}_INCLUDE_DIRS}")
		message("dep: ${dep}_LIBRARY: ${${dep}_LIBRARY}")
		message("dep: ${dep}_LIBRARIES: ${${dep}_LIBRARIES}")
		if(${dep}_INCLUDE_DIR)
			message("${dep}_INCLUDE_DIR: ${${dep}_INCLUDE_DIR}")
			target_include_directories(${this_target} PUBLIC ${${dep}_INCLUDE_DIR})
		endif()
		if(${dep}_INCLUDE_DIRS)
			message("${dep}_INCLUDE_DIRS: ${${dep}_INCLUDE_DIRS}")
			target_include_directories(${this_target} PUBLIC ${${dep}_INCLUDE_DIRS})
		endif()
		if(${dep}_LIBRARY)
			target_link_libraries(${this_target} PUBLIC ${${dep}_LIBRARY})
		elseif(NOT ${dep}_LIBRARIES)
			find_library(${dep}_LIBRARIES NAMES ${dep} lib${dep} ${dep}lib lib${dep}lib)
		endif()
		message("${dep}_LIBRARIES: ${${dep}_LIBRARIES}")
		if(${dep}_LIBRARIES)
			foreach(lib ${${dep}_LIBRARIES})
				if(TARGET ${lib})
					set(repo SYSTEM)
					break()
				else()
					find_library(libfound ${lib})
					if(libfound OR EXISTS "${lib}")
						set(repo SYSTEM)
						break()	
					endif()
				endif()
				message("lib ${lib}")
			endforeach()
			if(repo)
				message("repo ${repo}")
				if(repo STREQUAL "SYSTEM")
					message("Found ${dep}_LIBRARIES: ${${dep}_LIBRARIES}")
					target_link_libraries(${this_target} PUBLIC ${${dep}_LIBRARIES})
				else()
					message("Found no ${dep}_LIBRARIES: ${${dep}_LIBRARIES}")
					message("Trying external '${dep}' dependency from '${repo}'")
					ext(${dep} ${repo})
					if(OPENMIND_BUILD_BOOST)
						add_dependencies(${dep} boost)
					endif()
				endif()
			endif()
		endif()		
	else()
		message("No ${dep} local installations found")
	endif()
endmacro()
