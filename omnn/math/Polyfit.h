#pragma once
#include <omnn/rt/custom_allocator.hpp>

#ifdef BOOST_UBLAS_TYPE_CHECK
#	undef BOOST_UBLAS_TYPE_CHECK
#endif
#define BOOST_UBLAS_TYPE_CHECK 0
#ifndef _USE_MATH_DEFINES
#	define _USE_MATH_DEFINES
#endif

#include <iomanip>
#include <stdexcept>
#include <limits>
#include <numeric>
#include <vector>

#include <boost/algorithm/string/replace.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/lu.hpp>


namespace omnn::rt {

/*
	Finds the coefficients of a polynomial p(x) of degree n that fits the data,
	p(x(i)) to y(i), in a least squares sense. The result p is a row vector of
	length n+1 containing the polynomial coefficients in incremental powers.

	param:
 oX				x axis values
 oY				y axis values
 nDegree		polynomial degree including the constant

	return:
 coefficients of a polynomial starting at the constant coefficient and
 ending with the coefficient of power to nDegree.

 */
template<typename T>
auto polyfit( const std::vector<T>& oX, const std::vector<T>& oY, size_t nDegree )
{
    namespace ublas = boost::numeric::ublas;

    if ( oX.size() != oY.size() )
        throw std::invalid_argument( "X and Y vector sizes do not match" );

    // more intuitive this way
    nDegree++;

    auto nCount =  oX.size();
    using allocator_type = omnn::rt::custom_allocator<T>;
    using array_type = ublas::unbounded_array<T, allocator_type>;
    using matrix_type = ublas::matrix<T, ublas::row_major, array_type>;
    matrix_type oXMatrix(nCount, nDegree);
    matrix_type oYMatrix(nCount, 1);
    
    // Initialize matrices with zero values first
    for(size_t i = 0; i < nCount; i++) {
        for(size_t j = 0; j < nDegree; j++) {
            oXMatrix(i,j) = T();
        }
        oYMatrix(i,0) = T();
    }

    // copy y matrix
    for ( size_t i = 0; i < nCount; i++ )
    {
        oYMatrix(i, 0) = oY[i];
    }

    // create the X matrix
    for ( size_t nRow = 0; nRow < nCount; nRow++ )
    {
        T nVal = T(1);
        for (size_t nCol = 0; nCol < nDegree; nCol++)
        {
            oXMatrix(nRow, nCol) = nVal;
            nVal *= oX[nRow];
        }
    }

    // transpose X matrix
    matrix_type oXtMatrix(trans(oXMatrix));
    // multiply transposed X matrix with X matrix
    matrix_type oXtXMatrix(prec_prod(oXtMatrix, oXMatrix));
    // multiply transposed X matrix with Y matrix
    matrix_type oXtYMatrix(prec_prod(oXtMatrix, oYMatrix));

    // lu decomposition
    using perm_allocator_type = omnn::rt::custom_allocator<std::size_t>;
    using perm_array_type = ublas::unbounded_array<std::size_t, perm_allocator_type>;
    using perm_matrix_type = ublas::permutation_matrix<std::size_t, perm_array_type>;
    perm_matrix_type pert(oXtXMatrix.size1());
    auto singular = lu_factorize(oXtXMatrix, pert);
    // must be singular
    BOOST_ASSERT( singular == 0 );

    // backsubstitution
    lu_substitute(oXtXMatrix, pert, oXtYMatrix);

    // copy the result to coeff
    return std::vector<T>( oXtYMatrix.data().begin(), oXtYMatrix.data().end() );
}

/*
	Calculates the value of a polynomial of degree n evaluated at x. The input
	argument pCoeff is a vector of length n+1 whose elements are the coefficients
	in incremental powers of the polynomial to be evaluated.

	param:
 oCoeff			polynomial coefficients generated by polyfit() function
 oX				x axis values

	return:
 Fitted Y values.
 */
template<typename T>
auto polyval( const std::vector<T>& oCoeff, const std::vector<T>& oX )
{
    auto nCount =  oX.size();
    auto nDegree = oCoeff.size();
    std::vector<T>	oY( nCount );

    for ( size_t i = 0; i < nCount; i++ )
    {
        T nY = 0;
        T nXT = 1;
        T nX = oX[i];
        for ( size_t j = 0; j < nDegree; j++ )
        {
            // multiply current x by a coefficient
            nY += oCoeff[j] * nXT;
            // power up the X
            nXT *= nX;
        }
        oY[i] = std::move(nY);
    }

    return oY;
}


template <class T>
std::string polystr(const std::vector<T>& coeff)
{
    int p = 0;
    std::stringstream s;
    s << std::setprecision(100) << 0;
    for (auto& c: coeff) {
        s << '+';
        s << '(' << c << ')';
        s << "*x^" << p++;
    }
    return boost::replace_all_copy(s.str(), "e", "*10^");
}

} // namespace omnn::rt