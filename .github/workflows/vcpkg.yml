name: Vcpkg CI

on: [push]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        config: [RelWithDebInfo]
        vcpkg_triplet: [x64-linux, x64-windows, x64-osx]
        boost_version: [1.83.0, 1.85.0]
        opencl: [ON, OFF]
        include:
          - os: ubuntu-latest
            suffix: linux-x64
            vcpkg_triplet: x64-linux
          - os: windows-latest
            suffix: macos-x64
            vcpkg_triplet: x64-windows
          - os: macos-latest
            suffix: windows-x64
            vcpkg_triplet: x64-osx
        exclude:
          - os: macos-latest
            opencl: ON
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{github.workspace}}/vcpkg
          !${{github.workspace}}/vcpkg/buildtrees
          !${{github.workspace}}/vcpkg/packages
          !${{github.workspace}}/vcpkg/downloads
          ${{ github.workspace }}/build/bin/Db*.solutions
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}-${{ matrix.boost_version }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        command: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build autoconf automake autoconf-archive
          sudo apt install -y libxss-dev libx11-dev libxcb-screensaver0-dev ocl-icd-opencl-dev libopengl-dev freeglut3-dev libleveldb-dev libsnappy-dev libvulkan-dev liblz4-dev libfmt-dev librocksdb-dev libpython3-all-dev libopencl-clang-dev libtbb-dev ninja-build
        cmake --version
        ninja --version
        gcc --version
        g++ --version

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      env:
        VCPKG_PYTHON3: $(which python3)
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        command: |
          echo "VCPKG_PYTHON3=$VCPKG_PYTHON3" >> $GITHUB_ENV
          brew update || brew update || brew update || brew update || brew update
          brew install cmake ninja autoconf automake autoconf-archive
          cmake --version
          ninja --version
          clang --version

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2
      
    - name: Set Windows vcpkg triplet
      if: runner.os == 'Windows'
      run: echo "VCPKG_TARGET_TRIPLET_CMAKE_PARAM=-DVCPKG_TARGET_TRIPLET=x64-windows" >> $env:GITHUB_ENV

    - name: Setup MSVC
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'c82f74667287d3dc386bce81e44964370c91a289'
        vcpkgJsonGlob: '**/vcpkg.json'
        vcpkgTriplet: ${{ matrix.vcpkg_triplet }}

    - name: Configure CMake
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        command: |
        cmake -B ${{github.workspace}}/build -G "Ninja Multi-Config" -DCMAKE_MAKE_PROGRAM=ninja -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake ${{ env.VCPKG_TARGET_TRIPLET_CMAKE_PARAM }} -DOPENMIND_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DOPENMIND_USE_OPENCL=${{ matrix.opencl }} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install || cmake -B ${{github.workspace}}/build -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake -DOPENMIND_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DOPENMIND_USE_OPENCL=${{ matrix.opencl }} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.config }}

    - name: Install
      run: cmake --install ${{github.workspace}}/build --config ${{ matrix.config }} --prefix ${{github.workspace}}/install

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Check
      working-directory: ${{github.workspace}}/build
      run: ctest . -C ${{ matrix.config }} -j ${{steps.cpu-cores.outputs.count}} -E "ts" --rerun-failed --output-on-failure

    - name: List runtime dependencies
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          ldd ./install/bin/openmind || echo "Failed to check Linux dependencies"
        elif [ "$RUNNER_OS" == "macOS" ]; then
          otool -L ./install/bin/openmind || echo "Failed to check macOS dependencies"
        elif [ "$RUNNER_OS" == "Windows" ]; then
          # dumpbin is available after VS dev tools are set up
          "$VCINSTALLDIR/bin/Hostx64/x64/dumpbin.exe" /dependents ./install/bin/openmind.exe || echo "Failed to check Windows dependencies"
        fi

    - name: Package
      id: create_artifact
      shell: bash
      run: |
        mkdir -p release
        if [ ! -d "./install" ]; then
          echo "Error: Install directory not found"
          exit 1
        fi
        if [ "$RUNNER_OS" == "Windows" ]; then
          7z a -r openmind.zip ./install/* || exit 1
        else
          (cd ./install && zip -r ../openmind.zip *) || exit 1
        fi
        name=openmind-${{ matrix.suffix }}-$(git describe --always).zip
        mv -v ./openmind.zip release/${name} || exit 1
        echo "name=${name}" >> $GITHUB_OUTPUT
        echo "path=release/${name}" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.config }}-boost${{ matrix.boost_version }}-opencl${{ matrix.opencl }}
        path: ${{github.workspace}}/build

    - name: Create Changelog
      id: create_changelog
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      run: |
        last_tag=$(git describe --tags --abbrev=0 @^ || true)
        if [ -z "$last_tag" ]; then
        git log --oneline --format="%C(auto) %h %s" > changelog.txt
        else
        git log --oneline --format="%C(auto) %h %s" ${last_tag}..@ > changelog.txt
        fi
        cat changelog.txt

    - name: Release
      uses: ncipollo/release-action@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        artifacts: ${{ steps.create_artifact.outputs.path }}
        allowUpdates: true
        artifactContentType: application/zip
        bodyFile: changelog.txt
        draft: false
        omitBodyDuringUpdate: true
        omitNameDuringUpdate: true
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
