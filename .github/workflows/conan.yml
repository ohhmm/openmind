name: C/C++ CI Conan (Disabled)

on:
  push:
    branches-ignore:
      - '**'  # Disable this workflow by not running on any branch

jobs:
  build-on-windows:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Cache Boost dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/build/conan
          ${{ github.workspace }}/build/CMakeFiles
          C:/Boost
        key: ${{ runner.os }}-boost-${{ hashFiles('**/conanfile.txt') }}
        restore-keys: |
          ${{ runner.os }}-boost-
    - name: Create Build Dir
      run: cmake -E make_directory ${{github.workspace}}/build
    - name: Use Conan
      run: |
          pip install conan && conan profile detect

          echo "[requires]" > ${{github.workspace}}/conanfile.txt
          echo boost/1.86.0 >> ${{github.workspace}}/conanfile.txt
          echo leveldb/1.23 >> ${{github.workspace}}/conanfile.txt

          echo "[generators]" >> ${{github.workspace}}/conanfile.txt
          echo CMakeDeps >> ${{github.workspace}}/conanfile.txt
          echo CMakeToolchain >> ${{github.workspace}}/conanfile.txt
    - name: Configure
      working-directory: ${{github.workspace}}/build
      env:
        CC: cl
      run: cmake ${{github.workspace}} -DOPENMIND_USE_CONAN=ON -DOPENMIND_USE_VCPKG=NO -DOPENMIND_BUILD_SAMPLES=NO -DOPENMIND_BUILD_TESTS=ON -D CMAKE_C_COMPILER="cl.exe" -D CMAKE_CXX_COMPILER="cl.exe" -DOPENMIND_MATH_USE_LEVELDB_CACHE=NO -DOPENMIND_STORAGE_LEVELDB=NO
    - name: Install prerequisites with conan
      working-directory: ${{github.workspace}}/build
      run: cmake --build ${{github.workspace}}/build --target Install__Conan --config Release
    - name: Reconfigure to detect newly installed prerequisites
      working-directory: ${{github.workspace}}
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/build --preset conan-default
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build .
    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores
    - name: check
      working-directory: ${{github.workspace}}/build
      run: ctest . --timeout 2400 -C Debug -j ${{steps.cpu-cores.outputs.count}} -E "ts" --output-on-failure
            #   --rerun-failed --output-on-failure
