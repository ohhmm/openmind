name: CI

on:
  push:
    branches: [ main, feature/** ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            triplet: x64-linux
            python-dev: python3-dev libpython3-dev
          - os: windows-latest
            triplet: x64-windows
            python-dev: ""
          - os: macos-latest
            triplet: x64-osx
            python-dev: ""

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build autoconf automake libtool m4 autoconf-archive python3-dev python3-pip libbz2-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install python@3.10 autoconf automake libtool pkg-config ninja cmake bzip2
        brew link --force python@3.10
        python3 -m venv venv
        source venv/bin/activate
        python3 -m pip install --upgrade pip setuptools wheel
        python3 -m pip install -r requirements.txt

    - name: Setup Python 3.10 (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        architecture: 'x64'

    - name: Install Python dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ninja cmake --timeout 1800 --execution-timeout=1800
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -r requirements.txt

    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: |
          vcpkg
          build/vcpkg_installed
        key: vcpkg-${{ matrix.os }}-${{ hashFiles('vcpkg.json') }}

    - name: Setup vcpkg
      shell: bash
      run: |
        # Clone vcpkg if not already present
        if [[ ! -d "vcpkg" ]]; then
          git clone https://github.com/Microsoft/vcpkg.git
        fi

        # Bootstrap vcpkg
        pushd vcpkg
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          ./bootstrap-vcpkg.bat
        else
          chmod +x ./bootstrap-vcpkg.sh
          ./bootstrap-vcpkg.sh
        fi

        # Install dependencies
        ./vcpkg install --triplet=${{ matrix.triplet }} --clean-after-build
        popd

    - name: Configure CMake
      shell: bash
      run: |
        # Set BZip2 paths explicitly
        BZIP2_ROOT="${{ github.workspace }}/build/vcpkg_installed/${{ matrix.triplet }}"
        BZIP2_INCLUDE_DIR="${BZIP2_ROOT}/include"
        BZIP2_LIBRARY_PATH="${BZIP2_ROOT}/lib"
        
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          BZIP2_LIBRARIES="${BZIP2_LIBRARY_PATH}/bz2.lib"
        else
          BZIP2_LIBRARIES="${BZIP2_LIBRARY_PATH}/libbz2.a"
        fi
        
        # Bootstrap vcpkg if needed
        if [[ ! -f "vcpkg/vcpkg" ]]; then
          pushd vcpkg
          ./bootstrap-vcpkg.sh
          popd
        fi

        # Install dependencies with debug output
        echo "Installing vcpkg dependencies..."
        ./vcpkg/vcpkg install --triplet=${{ matrix.triplet }} --debug

        # Get actual vcpkg installation path
        VCPKG_ROOT="${{ github.workspace }}/vcpkg"
        VCPKG_INSTALL_PATH="${VCPKG_ROOT}/installed/${{ matrix.triplet }}"
        
        echo "Verifying vcpkg installation..."
        ls -la "${VCPKG_ROOT}"
        ls -la "${VCPKG_INSTALL_PATH}" || true
        ls -la "${VCPKG_INSTALL_PATH}/lib" || true
        
        # Set up BZip2 paths based on actual installation
        if [[ -f "${VCPKG_INSTALL_PATH}/lib/libbz2.a" ]]; then
          BZIP2_LIB="${VCPKG_INSTALL_PATH}/lib/libbz2.a"
        elif [[ -f "${VCPKG_INSTALL_PATH}/lib/libbz2.dylib" ]]; then
          BZIP2_LIB="${VCPKG_INSTALL_PATH}/lib/libbz2.dylib"
        elif [[ -f "${VCPKG_INSTALL_PATH}/lib/bz2.lib" ]]; then
          BZIP2_LIB="${VCPKG_INSTALL_PATH}/lib/bz2.lib"
        else
          echo "Error: Could not find BZip2 library. Contents of lib directory:"
          ls -la "${VCPKG_INSTALL_PATH}/lib"
          exit 1
        fi
        
        # Export BZip2 variables for CMake
        export BZIP2_ROOT="${VCPKG_INSTALL_PATH}"
        export BZIP2_INCLUDE_DIR="${VCPKG_INSTALL_PATH}/include"
        export BZIP2_LIBRARIES="${BZIP2_LIB}"
        
        echo "BZip2 configuration:"
        echo "BZIP2_ROOT=${BZIP2_ROOT}"
        echo "BZIP2_INCLUDE_DIR=${BZIP2_INCLUDE_DIR}"
        echo "BZIP2_LIBRARIES=${BZIP2_LIBRARIES}"
          
          BZIP2_ROOT="${VCPKG_INSTALL_PATH}"
          BZIP2_INCLUDE_DIR="${VCPKG_INSTALL_PATH}/include"
          BZIP2_LIBRARY_PATH="${VCPKG_INSTALL_PATH}/lib"
          BZIP2_LIBRARIES="${BZIP2_LIBRARY_PATH}/libbz2.a"
          
          # Configure CMake with explicit vcpkg and BZip2 configuration
          cmake -B build -S . \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DCMAKE_BUILD_TYPE=Release \
            -DOPENMIND_USE_VCPKG=ON \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} \
            -DBZIP2_ROOT="${BZIP2_ROOT}" \
            -DBZIP2_INCLUDE_DIR="${BZIP2_INCLUDE_DIR}" \
            -DBZIP2_LIBRARIES="${BZIP2_LIBRARIES}" \
            -DBZIP2_USE_STATIC_LIBS=ON \
            -DCMAKE_PREFIX_PATH="${VCPKG_INSTALL_PATH}" \
            -DCMAKE_FIND_ROOT_PATH="${VCPKG_INSTALL_PATH}" \
            -DCMAKE_FIND_DEBUG_MODE=ON \
            -DCMAKE_DEBUG_FIND_PACKAGE=BZip2
        else
          cmake -B build -S . \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DOPENMIND_USE_VCPKG=ON \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
        fi

    - name: Build
      shell: bash
      run: cmake --build build --config Release

    - name: Test
      working-directory: build
      shell: bash
      run: ctest -C Release --output-on-failure
